<!DOCTYPE html>
<html>
    <head>
        <title>Google Maps Nashville</title>
        <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
        <meta charset="UTF-8">
        <link rel="stylesheet" type="text/css" href="css/style.css">

        <!--External Dependencies-->
        <!-- jquery library and jquery.easing plugin are needed -->
        <script src="jquery.min.js"></script>
        <script src="jquery.easing.1.3.js"></script>

        <!-- we provide marker for google maps, so here it comes-->
        <script src="http://maps.googleapis.com/maps/api/js?key=AIzaSyDTv5YePpPO7yOXZtF8frjeIhnrFlkosYQ&sensor=false&libraries=drawing,geometry"></script>

        <!-- we use markerAnimate to actually animate marker -->
        <script src="markerAnimate.js"></script>

        <!-- SlidingMarker hides details from you - your markers are just animated automagically -->
        <script src="SlidingMarker.js"></script>
        <script>SlidingMarker.initializeGlobally();</script>

        <!--Internal Dependencies-->

        <script>
            // Forward Declarations and Globals
            var map;
            var static_icon_array = [];
            var robot_array = [];
            var real_robot_array = [];
            var task_area_array = [];
            var icon_array = [];
            var last_item = null;
            const affiliation = {
                EMS: 'EMS',
                HAZMAT: 'HAZMAT',
                POLICE: 'POLICE'
            };
            const object_type = {
                STATIC_ICON: 'static_icon',
                ROBOT: 'robot',
                TASK_AREA: 'task_area',                
                ICON: 'icon'
            };
            const nashville = new google.maps.LatLng(36.164549, -86.783468);
            const team_affiliation = affiliation.EMS;
            const DEBUG = false;
            const RVAA = false;
            var markerArray = new Array();
            var groupArray = new Array();
            var images = new Array();
            var myTaskArray = new Array();
            var EMSTaskArray = new Array();
            var HAZMATTaskArray = new Array();
            var POLICETaskArray = new Array();
            var webView;
            var taskType;
            var taskId = 1;
            var EMSTaskId = 101;
            var HAZMATTaskId = 201;
            var POLICETaskId = 301;
            var myDiv = "EMS";
			var tempTask = null;
            var firstRobot = true;

            //CenterLATitude, CenterLoNGitude, BorderLATitude1, etc.
            var clat  =  36.164549;
            var clng  = -86.783468;
            var blat1 =  0.001117;
            var blng1 =  0.002167;
            var blat2 = -0.001117;
            var blng2 = -0.002167;
            var mask1 = -0.001117;
            var mask2 =  0.001117;
            var mask3 = -0.002167;
            var mask4 =  0.002167;

            clock = 0;
            setInterval(function(){ clock += 0.1 }, 100);

            /*******************************************************************************
             * Logging to the screen
             * - This can only be attached after the window has initialized
             *******************************************************************************/
            var $log;
            function log(text) {
                if (DEBUG) {
                    if (text !== undefined) {
                        $log.html($log.html() + text + '<br/>');
                    } else {
                        $log.html('');
                    };
                } else {
                    console.log(text);
                }
            };
        </script>

        <script src="static_icon.js"></script>
        <script src="robot.js"></script>
        <script src="task_area.js"></script> 
        <script src="Scenarios.js"></script>  
        <!--script type="text/javascript" src="ObjectMarkers.js"></script-->
        <script type="text/javascript" src="ContextMenu.js"></script>
        <script type="text/javascript" src="ConvexHull.js"></script>
        <script type="text/javascript" src="Groups.js"></script>
        <script type="text/javascript" src="Initialize.js"></script>
        <script type="text/javascript" src="pGonIcon.js"></script>
        <script type="text/javascript" src="Preloader.js"></script>
        <script type="text/javascript" src="TaskMaker.js"></script>

    </head>
    <body>
  <div id="thisN">
    <p id="preloader">Preloading images...</p>
  </div>
       <div id="map"></div>
        <script>


            function sendMouseOver(item) {
                    var cmd = "hover," + item;
                    log(cmd);
                    webView.interactionFromJS(cmd);
            };

            function sendMouseOut(item) {
                if (item.groupIcon > 0){
                    //log(item.groupIcon);
                    //webView.fromJS(item.groupIcon);
                    setTimeout(set_icon_normal(item), 10000);
                } else {
                    var cmd = "unhover," + item.id;
                    log(cmd);
                    webView.interactionFromJS(cmd);
                }
            };

            function iconUnhover(iid) {
                log(iid);
                item = robot_array[iid];
                set_visual_state2(item, 'normal');
            };

            function removeItem(iid) {
                log("remove item " + iid);
                robot_array[iid].setMap(null);
                robot_array[iid] = null;
            };

            function sendClick(item) {
                    var cmd = "click," + item;
                    log(cmd);
                    webView.interactionFromJS(cmd);
            };

            function sendRobotPositions() {
                // log("Sending robot positions " + real_robot_array.length);
                for (var i = 1; i < real_robot_array.length; i++) {
                    var rob = real_robot_array[i];
                    //log(rob.rtype);
                    //log(rob.position.toString());
                    var cmd = "robotPos," + i + "," + rob.position.lat().toString() + "," + rob.position.lng().toString();
                    //log(cmd);
                    webView.interactionFromJS(cmd);
                }
            };

            function changeVisualState(iid, state) {
                 // var blurb = " beep " + iid + " " + state + " boop";
                 // log(blurb);
                var iName = robot_array[iid];
                // log(iName.rtype);
                set_visual_state2(iName, state);
            };
			function clearTempTask() {
				if (tempTask){
					tempTask.setMap(null);
					tempTask = null;
				}
			}
            function drawTask(pType, pDiv) {
				if (tempTask){
					clearTempTask();
				}
				drawingManager.setOptions({
					polygonOptions: {
						fillColor: '#ffffff',
						fillOpacity: 0.75,
						strokeColor: '#ffffff',
						strokeOpacity: 1.0,
						strokeWeight: 5,
						clickable: true,
						zIndex: 1,
						editable: true
					},
					polylineOptions: {
						strokeColor: '#ffffff',
						strokeOpacity: 1,
						strokeWeight: 10,
						clickable: true,
						zIndex: 1,
						editable: true
					}
				});
				switch (pType) {
					case 'Bomb Surveillance':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);
						break;
					case 'Decontaminate Self':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);
						break;
					case 'Gather Imagery':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
					case 'Gather Samples':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
					case 'Go To X':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYLINE);
						break;
					case 'Guide Victims':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
					case 'Hazard Sampling':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
					case 'Improve ommunication':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
					case 'Search Area':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
					case 'Surveillance':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
					case 'Victim Search':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
					case 'Victim Assessment':
						drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);
						break;
				}
            };

            function finishTask(tId, affiliation, rtype, msg1, msg2) {
                var path = tempTask.getPath();
                var pLength = path.getLength();
                var centLat = 0;
                var centLng = 0;
                for (var i = 0; i < pLength; i++) {
                        centLat += path.getAt(i).lat();
                        centLng += path.getAt(i).lng();
                    }
                log("function finishTask(tId, affiliation, rtype, msg1, msg2)");
                centLat = centLat/(pLength);
                centLng= centLng/(pLength);
                add_group_icon(tId, centLat, centLng, affiliation, rtype);
                var gIc = robot_array[tId];
                gIc.msg1 = msg1;
                gIc.msg2 = msg2;
                gIc.groupIcon = 2;
                tempTask.setEditable(false);
                var temp = new Group(tempTask, tId, gIc);
                myTaskArray[tId] = temp;
                set_visual_state2(gIc, 'normal')
                log(gIc.groupIcon);
                tempTask = null;
            };


            function scheduledTask(pp, polyType, tId, affiliation, rtype, msg1, msg2) {
                var path = new Array()
                var tLL;
                if (polyType == 'point'){
                    log("point-task: icon or small ellipse?");

                }
                else { 
                    pp.split(" ");
                    for (var i = 0; i < pp.length;) {
                        tLL = new google.maps.LatLng(pp[i], pp[i+1]);
                        i = i+2;
                        path.push(tLL);
                    }
                    var pLength = path.getLength();
                    var centLat = 0;
                    var centLng = 0;
                    for (var i = 0; i < pLength; i++) {
                            centLat += path.getAt(i).lat();
                            centLng += path.getAt(i).lng();
                        }
                    log("scheduled task");
                    centLat = centLat/(pLength);
                    centLng= centLng/(pLength);
                    var tt;
                    if (polyType == 'polygon'){
                        tt = new google.maps.Polygon({
                            paths: path,
                            strokeColor: '#FFFFFF',
                            strokeOpacity: 0.5,
                            strokeWeight: 1.5,
                            fillColor: '#FFFFFF',
                            fillOpacity: 0.20
                        });
                    }
                    else if (polyType == 'polyline') {
                        tt = new google.maps.Polyline({
                        path: path,
                        strokeColor: '#FFFFFF',
                        strokeOpacity: 0.5,
                        strokeWeight: 1.75
                      });
                    } else { //go to x
                        tt = null;
//TODO: STOPPED HERE; NEED TO FINISH DEALING WITH GOTOX and GUIDE VICTIMS
                    }
                    tt.setMap(map);
                    add_group_icon(tId, centLat, centLng, affiliation, rtype);
                    var gIc = robot_array[tId];
                    gIc.msg1 = msg1;
                    gIc.msg2 = msg2;
                    gIc.groupIcon = 2;
                    var temp = new Group(tt, tId, gIc);
                    myTaskArray[tId] = temp;
                    set_visual_state2(gIc, 'normal')
                    log(gIc.groupIcon);
                }
            };


            function removeTask(tId) {
                var iid = tId + 0;
                //log("myTaskArray length: " + myTaskArray.length);
                //log("removeTask" + iid);
                myTaskArray[iid].icon.setMap(null);
                myTaskArray[iid].icon = null;
                myTaskArray[iid].pGon.setMap(null);
                myTaskArray[iid] = null;
            };



            function setWebview(webV) {
                log("Got webView");
                webView = webV;
                webView.interactionFromJS("webView has been set in Javascript");
                gerald.interactionFromJS("bollocks");
            };

            function log(msg) {
                console.log(msg);
            };

            function addPolygon(e, drawingManager) {
                var tId = taskId;
                taskId++;
                // var tType = taskType;
                // var temp = new task(e, tType, tId, myDiv);
                var paths = e.getPaths();
                var pLength = paths.getLength();
                var ltlng = new Array();
                for (var i = 0; i < pLength; i++) {
                    var p = paths.getAt(i);
                    for (var j = 0; j < p.length; j++) {
                        ltlng.push(p.getAt(j).lat());
                        ltlng.push(p.getAt(j).lng());
                    }
                }
                //log("in RVA Derived");
                myTaskArray[tId] = e;
                var cmd = "added a polygon";
                // log(cmd);
                webView.interactionFromJS(cmd);
            };

            function addPolyline(e, drawingManager) {
                var tId = taskId;
                taskId++;
                var tType = taskType;
                var temp = new task(e, tType, tId, myDiv);
                var paths = e.getPath();
                var pLength = paths.getLength();
                var ltlng = new Array();
                    for (var i = 0; i < pLength; i++) {
                        ltlng.push(paths.getAt(i).lat());
                        ltlng.push(paths.getAt(i).lng());
                    }
                //log("in RVA Derived");
                myTaskArray[tId] = e;
                taskManifest.taskFromJS(ltlng, tId);
            };

            function initialize() {
                // Draw the map
                var myOptions = {
                    zoom: 19,
                    center: nashville,
                    mapTypeId: google.maps.MapTypeId.SATELLITE,
                    zoomControlOptions: { style: google.maps.ZoomControlStyle.SMALL },
                    rotateControl: false,
                    mapTypeControl: false,
                    streetViewControl: false,
                    tilt: 0
                };
                map = new google.maps.Map(document.getElementById('map'), myOptions);
        // var el = document.getElementById('thisN');
        // el.style.display = 'none';

                Dinitialize();

                /*******************************************************************************
                 *  Action Listeners
                 *  - These are the three general ways in which events occur in the program
                 *******************************************************************************/
                map.addListener('add_item', function(item, options) {
                    last_item = item(options);
                    //log("add_item listener triggered")
                    if (last_item.object_type === object_type.STATIC_ICON) { 
                        //log("add_item STATIC Listener");                       
                        static_icon_array[last_item.id] = last_item;
                        //log(last_item.iid);
                    } else if (last_item.object_type === object_type.ROBOT) {
                        //log("add_item ROBOT Listener");
                        if(last_item.rtype === robot_type.UAV || last_item.rtype === robot_type.UGV) {
                            log("It's a robot" + last_item.id + " " + last_item.rtype);
                            real_robot_array[last_item.id] = last_item;
                            // if(firstRobot){ 
                            //     bork();
                            //     firstRobot = false;
                            // }
                        } else {
                            // log("It's not a robot");
                            robot_array[last_item.id] = last_item;
                            // log(last_item.id);
                            // log(last_item.rtype);
                        }
                    } else if (last_item.object_type === object_type.TASK_AREA) {
                        task_area_array.push(last_item);
                    } else if (last_item.object_type === object_type.ICON) { 
                        //log("add_item ICON Listener");                       
                        icon_array[last_item.id] = last_item;
                        //log(last_item.iid);
                    }
                    //log(last_item.iid);
                });
                map.addListener('delete_item', function(item) {
                    item.setMap(null);
                    // item = null;
                    // doesn't actually delete the item for the moment; just hides them
                    // avoids array access errors for the moment

                    // if item is a task, stop patrol
                    // if item is a risk, decrease visual state of closeby
                    // if item is a robot, decrease visual score accordingly
                });
                map.addListener('move_item', function(item, position) {
                    // Item is assumed to be a robot
                    item.duration = google.maps.geometry.spherical.computeDistanceBetween(item.position, position) / item.speed;
                    // item.previous_position = item.position;
                    item.setPosition(position);
                });

                /*******************************************************************************
                 *  Interfacing Listeners
                 *  - These listen to user interface events 
                 *******************************************************************************/
                if (DEBUG) {
                    map.addListener('click', function(e) {
                        log(e.latLng);
                    });
                }

                // /*******************************************************************************
                //  * Logging to the screen
                //  *******************************************************************************/
                // if (DEBUG) {
                //     var log_div = document.createElement('div');
                //     log_div.id = 'log';
                //     log_div.className = 'control';
                //     document.body.appendChild(log_div);
                //     $log = $('#log');
                // }

                setTimeout(preloader, 500);
            }
            google.maps.event.addDomListener(window, 'load', initialize);
        </script>
        <!--script src="scenario_EAB5.js"></script-->
    </body>
</html>