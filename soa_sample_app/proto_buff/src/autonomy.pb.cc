// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autonomy.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "autonomy.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace autonomy_msg {

namespace {

const ::google::protobuf::Descriptor* Gpb_GridSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_GridSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_CasualtyPickup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_CasualtyPickup_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_NGOSite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_NGOSite_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_SPOI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_SPOI_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Waypoint_Override_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Waypoint_Override_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_SupplyDelivery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_SupplyDelivery_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Village_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Village_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_GridCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_GridCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Actor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Actor_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Custom_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Custom_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Base_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Base_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Terrain_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Terrain_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Mode_Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Mode_Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Waypoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Waypoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_RoadCell_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_RoadCell_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_CasualtyDelivery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_CasualtyDelivery_reflection_ = NULL;
const ::google::protobuf::Descriptor* Gpb_SupplyPickup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Gpb_SupplyPickup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_autonomy_2eproto() {
  protobuf_AddDesc_autonomy_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "autonomy.proto");
  GOOGLE_CHECK(file != NULL);
  Gpb_GridSpec_descriptor_ = file->message_type(0);
  static const int Gpb_GridSpec_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridSpec, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridSpec, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridSpec, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridSpec, gridorigin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridSpec, gridorigin_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridSpec, gridtoworldscale_),
  };
  Gpb_GridSpec_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_GridSpec_descriptor_,
      Gpb_GridSpec::default_instance_,
      Gpb_GridSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridSpec, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_GridSpec),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridSpec, _internal_metadata_),
      -1);
  Gpb_CasualtyPickup_descriptor_ = file->message_type(1);
  static const int Gpb_CasualtyPickup_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyPickup, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyPickup, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyPickup, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyPickup, greedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyPickup, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyPickup, multiplicity_),
  };
  Gpb_CasualtyPickup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_CasualtyPickup_descriptor_,
      Gpb_CasualtyPickup::default_instance_,
      Gpb_CasualtyPickup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyPickup, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_CasualtyPickup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyPickup, _internal_metadata_),
      -1);
  Gpb_NGOSite_descriptor_ = file->message_type(2);
  static const int Gpb_NGOSite_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_NGOSite, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_NGOSite, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_NGOSite, cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_NGOSite, supplies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_NGOSite, casualties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_NGOSite, civilians_),
  };
  Gpb_NGOSite_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_NGOSite_descriptor_,
      Gpb_NGOSite::default_instance_,
      Gpb_NGOSite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_NGOSite, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_NGOSite),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_NGOSite, _internal_metadata_),
      -1);
  Gpb_SPOI_descriptor_ = file->message_type(3);
  static const int Gpb_SPOI_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SPOI, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SPOI, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SPOI, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SPOI, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SPOI, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SPOI, pos_z_),
  };
  Gpb_SPOI_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_SPOI_descriptor_,
      Gpb_SPOI::default_instance_,
      Gpb_SPOI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SPOI, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_SPOI),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SPOI, _internal_metadata_),
      -1);
  Gpb_Waypoint_Override_descriptor_ = file->message_type(4);
  static const int Gpb_Waypoint_Override_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint_Override, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint_Override, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint_Override, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint_Override, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint_Override, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint_Override, pos_z_),
  };
  Gpb_Waypoint_Override_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Waypoint_Override_descriptor_,
      Gpb_Waypoint_Override::default_instance_,
      Gpb_Waypoint_Override_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint_Override, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Waypoint_Override),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint_Override, _internal_metadata_),
      -1);
  Gpb_SupplyDelivery_descriptor_ = file->message_type(5);
  static const int Gpb_SupplyDelivery_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyDelivery, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyDelivery, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyDelivery, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyDelivery, greedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyDelivery, ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyDelivery, multiplicity_),
  };
  Gpb_SupplyDelivery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_SupplyDelivery_descriptor_,
      Gpb_SupplyDelivery::default_instance_,
      Gpb_SupplyDelivery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyDelivery, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_SupplyDelivery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyDelivery, _internal_metadata_),
      -1);
  Gpb_Village_descriptor_ = file->message_type(6);
  static const int Gpb_Village_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Village, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Village, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Village, cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Village, supplies_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Village, casualties_),
  };
  Gpb_Village_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Village_descriptor_,
      Gpb_Village::default_instance_,
      Gpb_Village_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Village, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Village),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Village, _internal_metadata_),
      -1);
  Gpb_GridCell_descriptor_ = file->message_type(7);
  static const int Gpb_GridCell_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridCell, row_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridCell, col_),
  };
  Gpb_GridCell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_GridCell_descriptor_,
      Gpb_GridCell::default_instance_,
      Gpb_GridCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridCell, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_GridCell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_GridCell, _internal_metadata_),
      -1);
  Gpb_Actor_descriptor_ = file->message_type(8);
  static const int Gpb_Actor_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, unique_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, affiliation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, is_alive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, num_storage_slots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, num_casualties_stored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, num_supplies_stored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, num_civilians_stored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, is_weaponized_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, has_jammer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, fuel_remaining_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, pos_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, velocity_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, velocity_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, velocity_z_),
  };
  Gpb_Actor_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Actor_descriptor_,
      Gpb_Actor::default_instance_,
      Gpb_Actor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Actor),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Actor, _internal_metadata_),
      -1);
  Gpb_Custom_descriptor_ = file->message_type(9);
  static const int Gpb_Custom_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Custom, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Custom, data_),
  };
  Gpb_Custom_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Custom_descriptor_,
      Gpb_Custom::default_instance_,
      Gpb_Custom_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Custom, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Custom),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Custom, _internal_metadata_),
      -1);
  Gpb_Base_descriptor_ = file->message_type(10);
  static const int Gpb_Base_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Base, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Base, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Base, cells_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Base, supplies_),
  };
  Gpb_Base_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Base_descriptor_,
      Gpb_Base::default_instance_,
      Gpb_Base_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Base, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Base),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Base, _internal_metadata_),
      -1);
  Gpb_Terrain_descriptor_ = file->message_type(11);
  static const int Gpb_Terrain_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Terrain, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Terrain, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Terrain, cells_),
  };
  Gpb_Terrain_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Terrain_descriptor_,
      Gpb_Terrain::default_instance_,
      Gpb_Terrain_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Terrain, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Terrain),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Terrain, _internal_metadata_),
      -1);
  Gpb_Mode_Command_descriptor_ = file->message_type(12);
  static const int Gpb_Mode_Command_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Mode_Command, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Mode_Command, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Mode_Command, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Mode_Command, mode_id_),
  };
  Gpb_Mode_Command_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Mode_Command_descriptor_,
      Gpb_Mode_Command::default_instance_,
      Gpb_Mode_Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Mode_Command, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Mode_Command),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Mode_Command, _internal_metadata_),
      -1);
  Gpb_Waypoint_descriptor_ = file->message_type(13);
  static const int Gpb_Waypoint_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint, pos_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint, pos_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint, pos_z_),
  };
  Gpb_Waypoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Waypoint_descriptor_,
      Gpb_Waypoint::default_instance_,
      Gpb_Waypoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Waypoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Waypoint, _internal_metadata_),
      -1);
  Gpb_Time_descriptor_ = file->message_type(14);
  static const int Gpb_Time_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Time, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Time, time_),
  };
  Gpb_Time_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_Time_descriptor_,
      Gpb_Time::default_instance_,
      Gpb_Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Time, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_Time),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_Time, _internal_metadata_),
      -1);
  Gpb_RoadCell_descriptor_ = file->message_type(15);
  static const int Gpb_RoadCell_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_RoadCell, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_RoadCell, isroadend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_RoadCell, cell_),
  };
  Gpb_RoadCell_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_RoadCell_descriptor_,
      Gpb_RoadCell::default_instance_,
      Gpb_RoadCell_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_RoadCell, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_RoadCell),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_RoadCell, _internal_metadata_),
      -1);
  Gpb_CasualtyDelivery_descriptor_ = file->message_type(16);
  static const int Gpb_CasualtyDelivery_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyDelivery, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyDelivery, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyDelivery, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyDelivery, greedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyDelivery, multiplicity_),
  };
  Gpb_CasualtyDelivery_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_CasualtyDelivery_descriptor_,
      Gpb_CasualtyDelivery::default_instance_,
      Gpb_CasualtyDelivery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyDelivery, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_CasualtyDelivery),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_CasualtyDelivery, _internal_metadata_),
      -1);
  Gpb_SupplyPickup_descriptor_ = file->message_type(17);
  static const int Gpb_SupplyPickup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyPickup, belief_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyPickup, request_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyPickup, actor_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyPickup, greedy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyPickup, multiplicity_),
  };
  Gpb_SupplyPickup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Gpb_SupplyPickup_descriptor_,
      Gpb_SupplyPickup::default_instance_,
      Gpb_SupplyPickup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyPickup, _has_bits_[0]),
      -1,
      -1,
      sizeof(Gpb_SupplyPickup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Gpb_SupplyPickup, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_autonomy_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_GridSpec_descriptor_, &Gpb_GridSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_CasualtyPickup_descriptor_, &Gpb_CasualtyPickup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_NGOSite_descriptor_, &Gpb_NGOSite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_SPOI_descriptor_, &Gpb_SPOI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Waypoint_Override_descriptor_, &Gpb_Waypoint_Override::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_SupplyDelivery_descriptor_, &Gpb_SupplyDelivery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Village_descriptor_, &Gpb_Village::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_GridCell_descriptor_, &Gpb_GridCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Actor_descriptor_, &Gpb_Actor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Custom_descriptor_, &Gpb_Custom::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Base_descriptor_, &Gpb_Base::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Terrain_descriptor_, &Gpb_Terrain::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Mode_Command_descriptor_, &Gpb_Mode_Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Waypoint_descriptor_, &Gpb_Waypoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_Time_descriptor_, &Gpb_Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_RoadCell_descriptor_, &Gpb_RoadCell::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_CasualtyDelivery_descriptor_, &Gpb_CasualtyDelivery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Gpb_SupplyPickup_descriptor_, &Gpb_SupplyPickup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_autonomy_2eproto() {
  delete Gpb_GridSpec::default_instance_;
  delete Gpb_GridSpec_reflection_;
  delete Gpb_CasualtyPickup::default_instance_;
  delete Gpb_CasualtyPickup_reflection_;
  delete Gpb_NGOSite::default_instance_;
  delete Gpb_NGOSite_reflection_;
  delete Gpb_SPOI::default_instance_;
  delete Gpb_SPOI_reflection_;
  delete Gpb_Waypoint_Override::default_instance_;
  delete Gpb_Waypoint_Override_reflection_;
  delete Gpb_SupplyDelivery::default_instance_;
  delete Gpb_SupplyDelivery_reflection_;
  delete Gpb_Village::default_instance_;
  delete Gpb_Village_reflection_;
  delete Gpb_GridCell::default_instance_;
  delete Gpb_GridCell_reflection_;
  delete Gpb_Actor::default_instance_;
  delete Gpb_Actor_reflection_;
  delete Gpb_Custom::default_instance_;
  delete Gpb_Custom_reflection_;
  delete Gpb_Base::default_instance_;
  delete Gpb_Base_reflection_;
  delete Gpb_Terrain::default_instance_;
  delete Gpb_Terrain_reflection_;
  delete Gpb_Mode_Command::default_instance_;
  delete Gpb_Mode_Command_reflection_;
  delete Gpb_Waypoint::default_instance_;
  delete Gpb_Waypoint_reflection_;
  delete Gpb_Time::default_instance_;
  delete Gpb_Time_reflection_;
  delete Gpb_RoadCell::default_instance_;
  delete Gpb_RoadCell_reflection_;
  delete Gpb_CasualtyDelivery::default_instance_;
  delete Gpb_CasualtyDelivery_reflection_;
  delete Gpb_SupplyPickup::default_instance_;
  delete Gpb_SupplyPickup_reflection_;
}

void protobuf_AddDesc_autonomy_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016autonomy.proto\022\014autonomy_msg\"\210\001\n\014Gpb_G"
    "ridSpec\022\023\n\013belief_time\030\001 \002(\004\022\016\n\006height\030\002"
    " \002(\005\022\r\n\005width\030\003 \002(\005\022\024\n\014gridOrigin_x\030\004 \002("
    "\002\022\024\n\014gridOrigin_z\030\005 \002(\002\022\030\n\020gridToWorldSc"
    "ale\030\006 \002(\002\"\204\001\n\022Gpb_CasualtyPickup\022\023\n\013beli"
    "ef_time\030\001 \002(\004\022\024\n\014request_time\030\002 \002(\004\022\020\n\010a"
    "ctor_id\030\003 \002(\005\022\016\n\006greedy\030\004 \002(\010\022\013\n\003ids\030\005 \003"
    "(\005\022\024\n\014multiplicity\030\006 \003(\005\"\222\001\n\013Gpb_NGOSite"
    "\022\023\n\013belief_time\030\001 \002(\004\022\n\n\002id\030\002 \002(\005\022)\n\005cel"
    "ls\030\003 \003(\0132\032.autonomy_msg.Gpb_GridCell\022\020\n\010"
    "supplies\030\004 \002(\002\022\022\n\ncasualties\030\005 \002(\002\022\021\n\tci"
    "vilians\030\006 \002(\002\"t\n\010Gpb_SPOI\022\023\n\013belief_time"
    "\030\001 \002(\004\022\024\n\014request_time\030\002 \002(\004\022\020\n\010actor_id"
    "\030\003 \002(\005\022\r\n\005pos_x\030\004 \002(\002\022\r\n\005pos_y\030\005 \002(\002\022\r\n\005"
    "pos_z\030\006 \002(\002\"\201\001\n\025Gpb_Waypoint_Override\022\023\n"
    "\013belief_time\030\001 \002(\004\022\024\n\014request_time\030\002 \002(\004"
    "\022\020\n\010actor_id\030\003 \002(\005\022\r\n\005pos_x\030\004 \002(\002\022\r\n\005pos"
    "_y\030\005 \002(\002\022\r\n\005pos_z\030\006 \002(\002\"\204\001\n\022Gpb_SupplyDe"
    "livery\022\023\n\013belief_time\030\001 \002(\004\022\024\n\014request_t"
    "ime\030\002 \002(\004\022\020\n\010actor_id\030\003 \002(\005\022\016\n\006greedy\030\004 "
    "\002(\010\022\013\n\003ids\030\005 \003(\005\022\024\n\014multiplicity\030\006 \003(\005\"\177"
    "\n\013Gpb_Village\022\023\n\013belief_time\030\001 \002(\004\022\n\n\002id"
    "\030\002 \002(\005\022)\n\005cells\030\003 \003(\0132\032.autonomy_msg.Gpb"
    "_GridCell\022\020\n\010supplies\030\004 \002(\002\022\022\n\ncasualtie"
    "s\030\005 \002(\002\"(\n\014Gpb_GridCell\022\013\n\003row\030\001 \002(\005\022\013\n\003"
    "col\030\002 \002(\005\"\211\003\n\tGpb_Actor\022\023\n\013belief_time\030\001"
    " \002(\004\022\021\n\tunique_id\030\002 \002(\005\022\023\n\013affiliation\030\003"
    " \002(\005\022\014\n\004type\030\004 \002(\005\022\020\n\010is_alive\030\005 \002(\010\022\031\n\021"
    "num_storage_slots\030\006 \002(\r\022\035\n\025num_casualtie"
    "s_stored\030\007 \002(\r\022\033\n\023num_supplies_stored\030\010 "
    "\002(\r\022\034\n\024num_civilians_stored\030\t \002(\r\022\025\n\ris_"
    "weaponized\030\n \002(\010\022\022\n\nhas_jammer\030\013 \002(\010\022\026\n\016"
    "fuel_remaining\030\014 \002(\002\022\r\n\005pos_x\030\r \002(\002\022\r\n\005p"
    "os_y\030\016 \002(\002\022\r\n\005pos_z\030\017 \002(\002\022\022\n\nvelocity_x\030"
    "\020 \001(\002\022\022\n\nvelocity_y\030\021 \001(\002\022\022\n\nvelocity_z\030"
    "\022 \001(\002\"/\n\nGpb_Custom\022\023\n\013belief_time\030\001 \002(\004"
    "\022\014\n\004data\030\002 \002(\014\"h\n\010Gpb_Base\022\023\n\013belief_tim"
    "e\030\001 \002(\004\022\n\n\002id\030\002 \002(\005\022)\n\005cells\030\003 \003(\0132\032.aut"
    "onomy_msg.Gpb_GridCell\022\020\n\010supplies\030\004 \002(\002"
    "\"[\n\013Gpb_Terrain\022\023\n\013belief_time\030\001 \002(\004\022\014\n\004"
    "type\030\002 \002(\005\022)\n\005cells\030\003 \003(\0132\032.autonomy_msg"
    ".Gpb_GridCell\"`\n\020Gpb_Mode_Command\022\023\n\013bel"
    "ief_time\030\001 \002(\004\022\024\n\014request_time\030\002 \002(\004\022\020\n\010"
    "actor_id\030\003 \002(\005\022\017\n\007mode_id\030\004 \002(\005\"x\n\014Gpb_W"
    "aypoint\022\023\n\013belief_time\030\001 \002(\004\022\024\n\014request_"
    "time\030\002 \002(\004\022\020\n\010actor_id\030\003 \002(\005\022\r\n\005pos_x\030\004 "
    "\002(\002\022\r\n\005pos_y\030\005 \002(\002\022\r\n\005pos_z\030\006 \002(\002\"-\n\010Gpb"
    "_Time\022\023\n\013belief_time\030\001 \002(\004\022\014\n\004time\030\002 \002(\004"
    "\"`\n\014Gpb_RoadCell\022\023\n\013belief_time\030\001 \002(\004\022\021\n"
    "\tisRoadEnd\030\002 \002(\010\022(\n\004cell\030\003 \002(\0132\032.autonom"
    "y_msg.Gpb_GridCell\"y\n\024Gpb_CasualtyDelive"
    "ry\022\023\n\013belief_time\030\001 \002(\004\022\024\n\014request_time\030"
    "\002 \002(\004\022\020\n\010actor_id\030\003 \002(\005\022\016\n\006greedy\030\004 \002(\010\022"
    "\024\n\014multiplicity\030\005 \002(\005\"u\n\020Gpb_SupplyPicku"
    "p\022\023\n\013belief_time\030\001 \002(\004\022\024\n\014request_time\030\002"
    " \002(\004\022\020\n\010actor_id\030\003 \002(\005\022\016\n\006greedy\030\004 \002(\010\022\024"
    "\n\014multiplicity\030\005 \002(\005", 2260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "autonomy.proto", &protobuf_RegisterTypes);
  Gpb_GridSpec::default_instance_ = new Gpb_GridSpec();
  Gpb_CasualtyPickup::default_instance_ = new Gpb_CasualtyPickup();
  Gpb_NGOSite::default_instance_ = new Gpb_NGOSite();
  Gpb_SPOI::default_instance_ = new Gpb_SPOI();
  Gpb_Waypoint_Override::default_instance_ = new Gpb_Waypoint_Override();
  Gpb_SupplyDelivery::default_instance_ = new Gpb_SupplyDelivery();
  Gpb_Village::default_instance_ = new Gpb_Village();
  Gpb_GridCell::default_instance_ = new Gpb_GridCell();
  Gpb_Actor::default_instance_ = new Gpb_Actor();
  Gpb_Custom::default_instance_ = new Gpb_Custom();
  Gpb_Base::default_instance_ = new Gpb_Base();
  Gpb_Terrain::default_instance_ = new Gpb_Terrain();
  Gpb_Mode_Command::default_instance_ = new Gpb_Mode_Command();
  Gpb_Waypoint::default_instance_ = new Gpb_Waypoint();
  Gpb_Time::default_instance_ = new Gpb_Time();
  Gpb_RoadCell::default_instance_ = new Gpb_RoadCell();
  Gpb_CasualtyDelivery::default_instance_ = new Gpb_CasualtyDelivery();
  Gpb_SupplyPickup::default_instance_ = new Gpb_SupplyPickup();
  Gpb_GridSpec::default_instance_->InitAsDefaultInstance();
  Gpb_CasualtyPickup::default_instance_->InitAsDefaultInstance();
  Gpb_NGOSite::default_instance_->InitAsDefaultInstance();
  Gpb_SPOI::default_instance_->InitAsDefaultInstance();
  Gpb_Waypoint_Override::default_instance_->InitAsDefaultInstance();
  Gpb_SupplyDelivery::default_instance_->InitAsDefaultInstance();
  Gpb_Village::default_instance_->InitAsDefaultInstance();
  Gpb_GridCell::default_instance_->InitAsDefaultInstance();
  Gpb_Actor::default_instance_->InitAsDefaultInstance();
  Gpb_Custom::default_instance_->InitAsDefaultInstance();
  Gpb_Base::default_instance_->InitAsDefaultInstance();
  Gpb_Terrain::default_instance_->InitAsDefaultInstance();
  Gpb_Mode_Command::default_instance_->InitAsDefaultInstance();
  Gpb_Waypoint::default_instance_->InitAsDefaultInstance();
  Gpb_Time::default_instance_->InitAsDefaultInstance();
  Gpb_RoadCell::default_instance_->InitAsDefaultInstance();
  Gpb_CasualtyDelivery::default_instance_->InitAsDefaultInstance();
  Gpb_SupplyPickup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_autonomy_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_autonomy_2eproto {
  StaticDescriptorInitializer_autonomy_2eproto() {
    protobuf_AddDesc_autonomy_2eproto();
  }
} static_descriptor_initializer_autonomy_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int Gpb_GridSpec::kBeliefTimeFieldNumber;
const int Gpb_GridSpec::kHeightFieldNumber;
const int Gpb_GridSpec::kWidthFieldNumber;
const int Gpb_GridSpec::kGridOriginXFieldNumber;
const int Gpb_GridSpec::kGridOriginZFieldNumber;
const int Gpb_GridSpec::kGridToWorldScaleFieldNumber;
#endif  // !_MSC_VER

Gpb_GridSpec::Gpb_GridSpec()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_GridSpec)
}

void Gpb_GridSpec::InitAsDefaultInstance() {
}

Gpb_GridSpec::Gpb_GridSpec(const Gpb_GridSpec& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_GridSpec)
}

void Gpb_GridSpec::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  height_ = 0;
  width_ = 0;
  gridorigin_x_ = 0;
  gridorigin_z_ = 0;
  gridtoworldscale_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_GridSpec::~Gpb_GridSpec() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_GridSpec)
  SharedDtor();
}

void Gpb_GridSpec::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_GridSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_GridSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_GridSpec_descriptor_;
}

const Gpb_GridSpec& Gpb_GridSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_GridSpec* Gpb_GridSpec::default_instance_ = NULL;

Gpb_GridSpec* Gpb_GridSpec::New(::google::protobuf::Arena* arena) const {
  Gpb_GridSpec* n = new Gpb_GridSpec;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_GridSpec::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_GridSpec*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(belief_time_, gridtoworldscale_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_GridSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_GridSpec)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required int32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_width;
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (tag == 24) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_gridOrigin_x;
        break;
      }

      // required float gridOrigin_x = 4;
      case 4: {
        if (tag == 37) {
         parse_gridOrigin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gridorigin_x_)));
          set_has_gridorigin_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_gridOrigin_z;
        break;
      }

      // required float gridOrigin_z = 5;
      case 5: {
        if (tag == 45) {
         parse_gridOrigin_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gridorigin_z_)));
          set_has_gridorigin_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_gridToWorldScale;
        break;
      }

      // required float gridToWorldScale = 6;
      case 6: {
        if (tag == 53) {
         parse_gridToWorldScale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gridtoworldscale_)));
          set_has_gridtoworldscale();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_GridSpec)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_GridSpec)
  return false;
#undef DO_
}

void Gpb_GridSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_GridSpec)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required int32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // required int32 width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // required float gridOrigin_x = 4;
  if (has_gridorigin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->gridorigin_x(), output);
  }

  // required float gridOrigin_z = 5;
  if (has_gridorigin_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gridorigin_z(), output);
  }

  // required float gridToWorldScale = 6;
  if (has_gridtoworldscale()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->gridtoworldscale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_GridSpec)
}

::google::protobuf::uint8* Gpb_GridSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_GridSpec)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required int32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  // required int32 width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // required float gridOrigin_x = 4;
  if (has_gridorigin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->gridorigin_x(), target);
  }

  // required float gridOrigin_z = 5;
  if (has_gridorigin_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gridorigin_z(), target);
  }

  // required float gridToWorldScale = 6;
  if (has_gridtoworldscale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->gridtoworldscale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_GridSpec)
  return target;
}

int Gpb_GridSpec::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_height()) {
    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  if (has_width()) {
    // required int32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  if (has_gridorigin_x()) {
    // required float gridOrigin_x = 4;
    total_size += 1 + 4;
  }

  if (has_gridorigin_z()) {
    // required float gridOrigin_z = 5;
    total_size += 1 + 4;
  }

  if (has_gridtoworldscale()) {
    // required float gridToWorldScale = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
int Gpb_GridSpec::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required int32 height = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());

    // required int32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

    // required float gridOrigin_x = 4;
    total_size += 1 + 4;

    // required float gridOrigin_z = 5;
    total_size += 1 + 4;

    // required float gridToWorldScale = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_GridSpec::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_GridSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_GridSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_GridSpec::MergeFrom(const Gpb_GridSpec& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_gridorigin_x()) {
      set_gridorigin_x(from.gridorigin_x());
    }
    if (from.has_gridorigin_z()) {
      set_gridorigin_z(from.gridorigin_z());
    }
    if (from.has_gridtoworldscale()) {
      set_gridtoworldscale(from.gridtoworldscale());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_GridSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_GridSpec::CopyFrom(const Gpb_GridSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_GridSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Gpb_GridSpec::Swap(Gpb_GridSpec* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_GridSpec::InternalSwap(Gpb_GridSpec* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(height_, other->height_);
  std::swap(width_, other->width_);
  std::swap(gridorigin_x_, other->gridorigin_x_);
  std::swap(gridorigin_z_, other->gridorigin_z_);
  std::swap(gridtoworldscale_, other->gridtoworldscale_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_GridSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_GridSpec_descriptor_;
  metadata.reflection = Gpb_GridSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_CasualtyPickup::kBeliefTimeFieldNumber;
const int Gpb_CasualtyPickup::kRequestTimeFieldNumber;
const int Gpb_CasualtyPickup::kActorIdFieldNumber;
const int Gpb_CasualtyPickup::kGreedyFieldNumber;
const int Gpb_CasualtyPickup::kIdsFieldNumber;
const int Gpb_CasualtyPickup::kMultiplicityFieldNumber;
#endif  // !_MSC_VER

Gpb_CasualtyPickup::Gpb_CasualtyPickup()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_CasualtyPickup)
}

void Gpb_CasualtyPickup::InitAsDefaultInstance() {
}

Gpb_CasualtyPickup::Gpb_CasualtyPickup(const Gpb_CasualtyPickup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_CasualtyPickup)
}

void Gpb_CasualtyPickup::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  actor_id_ = 0;
  greedy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_CasualtyPickup::~Gpb_CasualtyPickup() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_CasualtyPickup)
  SharedDtor();
}

void Gpb_CasualtyPickup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_CasualtyPickup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_CasualtyPickup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_CasualtyPickup_descriptor_;
}

const Gpb_CasualtyPickup& Gpb_CasualtyPickup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_CasualtyPickup* Gpb_CasualtyPickup::default_instance_ = NULL;

Gpb_CasualtyPickup* Gpb_CasualtyPickup::New(::google::protobuf::Arena* arena) const {
  Gpb_CasualtyPickup* n = new Gpb_CasualtyPickup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_CasualtyPickup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_CasualtyPickup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(belief_time_, greedy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ids_.Clear();
  multiplicity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_CasualtyPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_CasualtyPickup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // required uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actor_id;
        break;
      }

      // required int32 actor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_greedy;
        break;
      }

      // required bool greedy = 4;
      case 4: {
        if (tag == 32) {
         parse_greedy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &greedy_)));
          set_has_greedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ids;
        break;
      }

      // repeated int32 ids = 5;
      case 5: {
        if (tag == 40) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ids;
        if (input->ExpectTag(48)) goto parse_multiplicity;
        break;
      }

      // repeated int32 multiplicity = 6;
      case 6: {
        if (tag == 48) {
         parse_multiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_multiplicity())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_multiplicity())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_multiplicity;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_CasualtyPickup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_CasualtyPickup)
  return false;
#undef DO_
}

void Gpb_CasualtyPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_CasualtyPickup)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // required bool greedy = 4;
  if (has_greedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->greedy(), output);
  }

  // repeated int32 ids = 5;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->ids(i), output);
  }

  // repeated int32 multiplicity = 6;
  for (int i = 0; i < this->multiplicity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->multiplicity(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_CasualtyPickup)
}

::google::protobuf::uint8* Gpb_CasualtyPickup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_CasualtyPickup)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // required bool greedy = 4;
  if (has_greedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->greedy(), target);
  }

  // repeated int32 ids = 5;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->ids(i), target);
  }

  // repeated int32 multiplicity = 6;
  for (int i = 0; i < this->multiplicity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->multiplicity(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_CasualtyPickup)
  return target;
}

int Gpb_CasualtyPickup::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_request_time()) {
    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());
  }

  if (has_actor_id()) {
    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());
  }

  if (has_greedy()) {
    // required bool greedy = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
int Gpb_CasualtyPickup::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());

    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());

    // required bool greedy = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  // repeated int32 multiplicity = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->multiplicity_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->multiplicity(i));
    }
    total_size += 1 * this->multiplicity_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_CasualtyPickup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_CasualtyPickup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_CasualtyPickup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_CasualtyPickup::MergeFrom(const Gpb_CasualtyPickup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ids_.MergeFrom(from.ids_);
  multiplicity_.MergeFrom(from.multiplicity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_greedy()) {
      set_greedy(from.greedy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_CasualtyPickup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_CasualtyPickup::CopyFrom(const Gpb_CasualtyPickup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_CasualtyPickup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Gpb_CasualtyPickup::Swap(Gpb_CasualtyPickup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_CasualtyPickup::InternalSwap(Gpb_CasualtyPickup* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(request_time_, other->request_time_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(greedy_, other->greedy_);
  ids_.UnsafeArenaSwap(&other->ids_);
  multiplicity_.UnsafeArenaSwap(&other->multiplicity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_CasualtyPickup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_CasualtyPickup_descriptor_;
  metadata.reflection = Gpb_CasualtyPickup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_NGOSite::kBeliefTimeFieldNumber;
const int Gpb_NGOSite::kIdFieldNumber;
const int Gpb_NGOSite::kCellsFieldNumber;
const int Gpb_NGOSite::kSuppliesFieldNumber;
const int Gpb_NGOSite::kCasualtiesFieldNumber;
const int Gpb_NGOSite::kCiviliansFieldNumber;
#endif  // !_MSC_VER

Gpb_NGOSite::Gpb_NGOSite()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_NGOSite)
}

void Gpb_NGOSite::InitAsDefaultInstance() {
}

Gpb_NGOSite::Gpb_NGOSite(const Gpb_NGOSite& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_NGOSite)
}

void Gpb_NGOSite::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  supplies_ = 0;
  casualties_ = 0;
  civilians_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_NGOSite::~Gpb_NGOSite() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_NGOSite)
  SharedDtor();
}

void Gpb_NGOSite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_NGOSite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_NGOSite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_NGOSite_descriptor_;
}

const Gpb_NGOSite& Gpb_NGOSite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_NGOSite* Gpb_NGOSite::default_instance_ = NULL;

Gpb_NGOSite* Gpb_NGOSite::New(::google::protobuf::Arena* arena) const {
  Gpb_NGOSite* n = new Gpb_NGOSite;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_NGOSite::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_NGOSite*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 59) {
    ZR_(id_, civilians_);
    belief_time_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_NGOSite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_NGOSite)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        break;
      }

      // repeated .autonomy_msg.Gpb_GridCell cells = 3;
      case 3: {
        if (tag == 26) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        if (input->ExpectTag(37)) goto parse_supplies;
        break;
      }

      // required float supplies = 4;
      case 4: {
        if (tag == 37) {
         parse_supplies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &supplies_)));
          set_has_supplies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_casualties;
        break;
      }

      // required float casualties = 5;
      case 5: {
        if (tag == 45) {
         parse_casualties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &casualties_)));
          set_has_casualties();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_civilians;
        break;
      }

      // required float civilians = 6;
      case 6: {
        if (tag == 53) {
         parse_civilians:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &civilians_)));
          set_has_civilians();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_NGOSite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_NGOSite)
  return false;
#undef DO_
}

void Gpb_NGOSite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_NGOSite)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cells(i), output);
  }

  // required float supplies = 4;
  if (has_supplies()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->supplies(), output);
  }

  // required float casualties = 5;
  if (has_casualties()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->casualties(), output);
  }

  // required float civilians = 6;
  if (has_civilians()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->civilians(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_NGOSite)
}

::google::protobuf::uint8* Gpb_NGOSite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_NGOSite)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cells(i), target);
  }

  // required float supplies = 4;
  if (has_supplies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->supplies(), target);
  }

  // required float casualties = 5;
  if (has_casualties()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->casualties(), target);
  }

  // required float civilians = 6;
  if (has_civilians()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->civilians(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_NGOSite)
  return target;
}

int Gpb_NGOSite::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_supplies()) {
    // required float supplies = 4;
    total_size += 1 + 4;
  }

  if (has_casualties()) {
    // required float casualties = 5;
    total_size += 1 + 4;
  }

  if (has_civilians()) {
    // required float civilians = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
int Gpb_NGOSite::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003b) ^ 0x0000003b) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float supplies = 4;
    total_size += 1 + 4;

    // required float casualties = 5;
    total_size += 1 + 4;

    // required float civilians = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_NGOSite::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_NGOSite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_NGOSite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_NGOSite::MergeFrom(const Gpb_NGOSite& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_supplies()) {
      set_supplies(from.supplies());
    }
    if (from.has_casualties()) {
      set_casualties(from.casualties());
    }
    if (from.has_civilians()) {
      set_civilians(from.civilians());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_NGOSite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_NGOSite::CopyFrom(const Gpb_NGOSite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_NGOSite::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cells())) return false;
  return true;
}

void Gpb_NGOSite::Swap(Gpb_NGOSite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_NGOSite::InternalSwap(Gpb_NGOSite* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(id_, other->id_);
  cells_.UnsafeArenaSwap(&other->cells_);
  std::swap(supplies_, other->supplies_);
  std::swap(casualties_, other->casualties_);
  std::swap(civilians_, other->civilians_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_NGOSite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_NGOSite_descriptor_;
  metadata.reflection = Gpb_NGOSite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_SPOI::kBeliefTimeFieldNumber;
const int Gpb_SPOI::kRequestTimeFieldNumber;
const int Gpb_SPOI::kActorIdFieldNumber;
const int Gpb_SPOI::kPosXFieldNumber;
const int Gpb_SPOI::kPosYFieldNumber;
const int Gpb_SPOI::kPosZFieldNumber;
#endif  // !_MSC_VER

Gpb_SPOI::Gpb_SPOI()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_SPOI)
}

void Gpb_SPOI::InitAsDefaultInstance() {
}

Gpb_SPOI::Gpb_SPOI(const Gpb_SPOI& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_SPOI)
}

void Gpb_SPOI::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  actor_id_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_SPOI::~Gpb_SPOI() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_SPOI)
  SharedDtor();
}

void Gpb_SPOI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_SPOI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_SPOI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_SPOI_descriptor_;
}

const Gpb_SPOI& Gpb_SPOI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_SPOI* Gpb_SPOI::default_instance_ = NULL;

Gpb_SPOI* Gpb_SPOI::New(::google::protobuf::Arena* arena) const {
  Gpb_SPOI* n = new Gpb_SPOI;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_SPOI::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_SPOI*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(belief_time_, pos_z_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_SPOI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_SPOI)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // required uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actor_id;
        break;
      }

      // required int32 actor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pos_x;
        break;
      }

      // required float pos_x = 4;
      case 4: {
        if (tag == 37) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pos_y;
        break;
      }

      // required float pos_y = 5;
      case 5: {
        if (tag == 45) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pos_z;
        break;
      }

      // required float pos_z = 6;
      case 6: {
        if (tag == 53) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          set_has_pos_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_SPOI)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_SPOI)
  return false;
#undef DO_
}

void Gpb_SPOI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_SPOI)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // required float pos_x = 4;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_x(), output);
  }

  // required float pos_y = 5;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_y(), output);
  }

  // required float pos_z = 6;
  if (has_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pos_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_SPOI)
}

::google::protobuf::uint8* Gpb_SPOI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_SPOI)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // required float pos_x = 4;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_x(), target);
  }

  // required float pos_y = 5;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_y(), target);
  }

  // required float pos_z = 6;
  if (has_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pos_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_SPOI)
  return target;
}

int Gpb_SPOI::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_request_time()) {
    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());
  }

  if (has_actor_id()) {
    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());
  }

  if (has_pos_x()) {
    // required float pos_x = 4;
    total_size += 1 + 4;
  }

  if (has_pos_y()) {
    // required float pos_y = 5;
    total_size += 1 + 4;
  }

  if (has_pos_z()) {
    // required float pos_z = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
int Gpb_SPOI::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());

    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());

    // required float pos_x = 4;
    total_size += 1 + 4;

    // required float pos_y = 5;
    total_size += 1 + 4;

    // required float pos_z = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_SPOI::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_SPOI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_SPOI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_SPOI::MergeFrom(const Gpb_SPOI& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_pos_z()) {
      set_pos_z(from.pos_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_SPOI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_SPOI::CopyFrom(const Gpb_SPOI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_SPOI::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Gpb_SPOI::Swap(Gpb_SPOI* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_SPOI::InternalSwap(Gpb_SPOI* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(request_time_, other->request_time_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_SPOI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_SPOI_descriptor_;
  metadata.reflection = Gpb_SPOI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Waypoint_Override::kBeliefTimeFieldNumber;
const int Gpb_Waypoint_Override::kRequestTimeFieldNumber;
const int Gpb_Waypoint_Override::kActorIdFieldNumber;
const int Gpb_Waypoint_Override::kPosXFieldNumber;
const int Gpb_Waypoint_Override::kPosYFieldNumber;
const int Gpb_Waypoint_Override::kPosZFieldNumber;
#endif  // !_MSC_VER

Gpb_Waypoint_Override::Gpb_Waypoint_Override()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Waypoint_Override)
}

void Gpb_Waypoint_Override::InitAsDefaultInstance() {
}

Gpb_Waypoint_Override::Gpb_Waypoint_Override(const Gpb_Waypoint_Override& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Waypoint_Override)
}

void Gpb_Waypoint_Override::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  actor_id_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Waypoint_Override::~Gpb_Waypoint_Override() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Waypoint_Override)
  SharedDtor();
}

void Gpb_Waypoint_Override::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_Waypoint_Override::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Waypoint_Override::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Waypoint_Override_descriptor_;
}

const Gpb_Waypoint_Override& Gpb_Waypoint_Override::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Waypoint_Override* Gpb_Waypoint_Override::default_instance_ = NULL;

Gpb_Waypoint_Override* Gpb_Waypoint_Override::New(::google::protobuf::Arena* arena) const {
  Gpb_Waypoint_Override* n = new Gpb_Waypoint_Override;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Waypoint_Override::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_Waypoint_Override*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(belief_time_, pos_z_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Waypoint_Override::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Waypoint_Override)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // required uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actor_id;
        break;
      }

      // required int32 actor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pos_x;
        break;
      }

      // required float pos_x = 4;
      case 4: {
        if (tag == 37) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pos_y;
        break;
      }

      // required float pos_y = 5;
      case 5: {
        if (tag == 45) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pos_z;
        break;
      }

      // required float pos_z = 6;
      case 6: {
        if (tag == 53) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          set_has_pos_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Waypoint_Override)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Waypoint_Override)
  return false;
#undef DO_
}

void Gpb_Waypoint_Override::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Waypoint_Override)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // required float pos_x = 4;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_x(), output);
  }

  // required float pos_y = 5;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_y(), output);
  }

  // required float pos_z = 6;
  if (has_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pos_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Waypoint_Override)
}

::google::protobuf::uint8* Gpb_Waypoint_Override::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Waypoint_Override)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // required float pos_x = 4;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_x(), target);
  }

  // required float pos_y = 5;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_y(), target);
  }

  // required float pos_z = 6;
  if (has_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pos_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Waypoint_Override)
  return target;
}

int Gpb_Waypoint_Override::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_request_time()) {
    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());
  }

  if (has_actor_id()) {
    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());
  }

  if (has_pos_x()) {
    // required float pos_x = 4;
    total_size += 1 + 4;
  }

  if (has_pos_y()) {
    // required float pos_y = 5;
    total_size += 1 + 4;
  }

  if (has_pos_z()) {
    // required float pos_z = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
int Gpb_Waypoint_Override::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());

    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());

    // required float pos_x = 4;
    total_size += 1 + 4;

    // required float pos_y = 5;
    total_size += 1 + 4;

    // required float pos_z = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Waypoint_Override::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Waypoint_Override* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Waypoint_Override*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Waypoint_Override::MergeFrom(const Gpb_Waypoint_Override& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_pos_z()) {
      set_pos_z(from.pos_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Waypoint_Override::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Waypoint_Override::CopyFrom(const Gpb_Waypoint_Override& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Waypoint_Override::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Gpb_Waypoint_Override::Swap(Gpb_Waypoint_Override* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Waypoint_Override::InternalSwap(Gpb_Waypoint_Override* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(request_time_, other->request_time_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Waypoint_Override::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Waypoint_Override_descriptor_;
  metadata.reflection = Gpb_Waypoint_Override_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_SupplyDelivery::kBeliefTimeFieldNumber;
const int Gpb_SupplyDelivery::kRequestTimeFieldNumber;
const int Gpb_SupplyDelivery::kActorIdFieldNumber;
const int Gpb_SupplyDelivery::kGreedyFieldNumber;
const int Gpb_SupplyDelivery::kIdsFieldNumber;
const int Gpb_SupplyDelivery::kMultiplicityFieldNumber;
#endif  // !_MSC_VER

Gpb_SupplyDelivery::Gpb_SupplyDelivery()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_SupplyDelivery)
}

void Gpb_SupplyDelivery::InitAsDefaultInstance() {
}

Gpb_SupplyDelivery::Gpb_SupplyDelivery(const Gpb_SupplyDelivery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_SupplyDelivery)
}

void Gpb_SupplyDelivery::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  actor_id_ = 0;
  greedy_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_SupplyDelivery::~Gpb_SupplyDelivery() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_SupplyDelivery)
  SharedDtor();
}

void Gpb_SupplyDelivery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_SupplyDelivery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_SupplyDelivery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_SupplyDelivery_descriptor_;
}

const Gpb_SupplyDelivery& Gpb_SupplyDelivery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_SupplyDelivery* Gpb_SupplyDelivery::default_instance_ = NULL;

Gpb_SupplyDelivery* Gpb_SupplyDelivery::New(::google::protobuf::Arena* arena) const {
  Gpb_SupplyDelivery* n = new Gpb_SupplyDelivery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_SupplyDelivery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_SupplyDelivery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(belief_time_, greedy_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ids_.Clear();
  multiplicity_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_SupplyDelivery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_SupplyDelivery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // required uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actor_id;
        break;
      }

      // required int32 actor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_greedy;
        break;
      }

      // required bool greedy = 4;
      case 4: {
        if (tag == 32) {
         parse_greedy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &greedy_)));
          set_has_greedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ids;
        break;
      }

      // repeated int32 ids = 5;
      case 5: {
        if (tag == 40) {
         parse_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_ids())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_ids;
        if (input->ExpectTag(48)) goto parse_multiplicity;
        break;
      }

      // repeated int32 multiplicity = 6;
      case 6: {
        if (tag == 48) {
         parse_multiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_multiplicity())));
        } else if (tag == 50) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_multiplicity())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_multiplicity;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_SupplyDelivery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_SupplyDelivery)
  return false;
#undef DO_
}

void Gpb_SupplyDelivery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_SupplyDelivery)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // required bool greedy = 4;
  if (has_greedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->greedy(), output);
  }

  // repeated int32 ids = 5;
  for (int i = 0; i < this->ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->ids(i), output);
  }

  // repeated int32 multiplicity = 6;
  for (int i = 0; i < this->multiplicity_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->multiplicity(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_SupplyDelivery)
}

::google::protobuf::uint8* Gpb_SupplyDelivery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_SupplyDelivery)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // required bool greedy = 4;
  if (has_greedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->greedy(), target);
  }

  // repeated int32 ids = 5;
  for (int i = 0; i < this->ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->ids(i), target);
  }

  // repeated int32 multiplicity = 6;
  for (int i = 0; i < this->multiplicity_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->multiplicity(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_SupplyDelivery)
  return target;
}

int Gpb_SupplyDelivery::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_request_time()) {
    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());
  }

  if (has_actor_id()) {
    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());
  }

  if (has_greedy()) {
    // required bool greedy = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
int Gpb_SupplyDelivery::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());

    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());

    // required bool greedy = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 ids = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ids(i));
    }
    total_size += 1 * this->ids_size() + data_size;
  }

  // repeated int32 multiplicity = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->multiplicity_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->multiplicity(i));
    }
    total_size += 1 * this->multiplicity_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_SupplyDelivery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_SupplyDelivery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_SupplyDelivery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_SupplyDelivery::MergeFrom(const Gpb_SupplyDelivery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  ids_.MergeFrom(from.ids_);
  multiplicity_.MergeFrom(from.multiplicity_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_greedy()) {
      set_greedy(from.greedy());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_SupplyDelivery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_SupplyDelivery::CopyFrom(const Gpb_SupplyDelivery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_SupplyDelivery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Gpb_SupplyDelivery::Swap(Gpb_SupplyDelivery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_SupplyDelivery::InternalSwap(Gpb_SupplyDelivery* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(request_time_, other->request_time_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(greedy_, other->greedy_);
  ids_.UnsafeArenaSwap(&other->ids_);
  multiplicity_.UnsafeArenaSwap(&other->multiplicity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_SupplyDelivery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_SupplyDelivery_descriptor_;
  metadata.reflection = Gpb_SupplyDelivery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Village::kBeliefTimeFieldNumber;
const int Gpb_Village::kIdFieldNumber;
const int Gpb_Village::kCellsFieldNumber;
const int Gpb_Village::kSuppliesFieldNumber;
const int Gpb_Village::kCasualtiesFieldNumber;
#endif  // !_MSC_VER

Gpb_Village::Gpb_Village()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Village)
}

void Gpb_Village::InitAsDefaultInstance() {
}

Gpb_Village::Gpb_Village(const Gpb_Village& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Village)
}

void Gpb_Village::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  supplies_ = 0;
  casualties_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Village::~Gpb_Village() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Village)
  SharedDtor();
}

void Gpb_Village::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_Village::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Village::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Village_descriptor_;
}

const Gpb_Village& Gpb_Village::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Village* Gpb_Village::default_instance_ = NULL;

Gpb_Village* Gpb_Village::New(::google::protobuf::Arena* arena) const {
  Gpb_Village* n = new Gpb_Village;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Village::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_Village*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(id_, casualties_);
    belief_time_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Village::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Village)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        break;
      }

      // repeated .autonomy_msg.Gpb_GridCell cells = 3;
      case 3: {
        if (tag == 26) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        if (input->ExpectTag(37)) goto parse_supplies;
        break;
      }

      // required float supplies = 4;
      case 4: {
        if (tag == 37) {
         parse_supplies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &supplies_)));
          set_has_supplies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_casualties;
        break;
      }

      // required float casualties = 5;
      case 5: {
        if (tag == 45) {
         parse_casualties:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &casualties_)));
          set_has_casualties();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Village)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Village)
  return false;
#undef DO_
}

void Gpb_Village::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Village)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cells(i), output);
  }

  // required float supplies = 4;
  if (has_supplies()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->supplies(), output);
  }

  // required float casualties = 5;
  if (has_casualties()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->casualties(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Village)
}

::google::protobuf::uint8* Gpb_Village::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Village)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cells(i), target);
  }

  // required float supplies = 4;
  if (has_supplies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->supplies(), target);
  }

  // required float casualties = 5;
  if (has_casualties()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->casualties(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Village)
  return target;
}

int Gpb_Village::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_supplies()) {
    // required float supplies = 4;
    total_size += 1 + 4;
  }

  if (has_casualties()) {
    // required float casualties = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
int Gpb_Village::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001b) ^ 0x0000001b) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float supplies = 4;
    total_size += 1 + 4;

    // required float casualties = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Village::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Village* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Village*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Village::MergeFrom(const Gpb_Village& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_supplies()) {
      set_supplies(from.supplies());
    }
    if (from.has_casualties()) {
      set_casualties(from.casualties());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Village::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Village::CopyFrom(const Gpb_Village& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Village::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001b) != 0x0000001b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cells())) return false;
  return true;
}

void Gpb_Village::Swap(Gpb_Village* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Village::InternalSwap(Gpb_Village* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(id_, other->id_);
  cells_.UnsafeArenaSwap(&other->cells_);
  std::swap(supplies_, other->supplies_);
  std::swap(casualties_, other->casualties_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Village::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Village_descriptor_;
  metadata.reflection = Gpb_Village_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_GridCell::kRowFieldNumber;
const int Gpb_GridCell::kColFieldNumber;
#endif  // !_MSC_VER

Gpb_GridCell::Gpb_GridCell()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_GridCell)
}

void Gpb_GridCell::InitAsDefaultInstance() {
}

Gpb_GridCell::Gpb_GridCell(const Gpb_GridCell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_GridCell)
}

void Gpb_GridCell::SharedCtor() {
  _cached_size_ = 0;
  row_ = 0;
  col_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_GridCell::~Gpb_GridCell() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_GridCell)
  SharedDtor();
}

void Gpb_GridCell::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_GridCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_GridCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_GridCell_descriptor_;
}

const Gpb_GridCell& Gpb_GridCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_GridCell* Gpb_GridCell::default_instance_ = NULL;

Gpb_GridCell* Gpb_GridCell::New(::google::protobuf::Arena* arena) const {
  Gpb_GridCell* n = new Gpb_GridCell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_GridCell::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_GridCell*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(row_, col_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_GridCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_GridCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 row = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &row_)));
          set_has_row();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_col;
        break;
      }

      // required int32 col = 2;
      case 2: {
        if (tag == 16) {
         parse_col:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &col_)));
          set_has_col();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_GridCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_GridCell)
  return false;
#undef DO_
}

void Gpb_GridCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_GridCell)
  // required int32 row = 1;
  if (has_row()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->row(), output);
  }

  // required int32 col = 2;
  if (has_col()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->col(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_GridCell)
}

::google::protobuf::uint8* Gpb_GridCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_GridCell)
  // required int32 row = 1;
  if (has_row()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->row(), target);
  }

  // required int32 col = 2;
  if (has_col()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->col(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_GridCell)
  return target;
}

int Gpb_GridCell::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_row()) {
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());
  }

  if (has_col()) {
    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());
  }

  return total_size;
}
int Gpb_GridCell::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 row = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->row());

    // required int32 col = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->col());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_GridCell::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_GridCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_GridCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_GridCell::MergeFrom(const Gpb_GridCell& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row()) {
      set_row(from.row());
    }
    if (from.has_col()) {
      set_col(from.col());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_GridCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_GridCell::CopyFrom(const Gpb_GridCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_GridCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Gpb_GridCell::Swap(Gpb_GridCell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_GridCell::InternalSwap(Gpb_GridCell* other) {
  std::swap(row_, other->row_);
  std::swap(col_, other->col_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_GridCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_GridCell_descriptor_;
  metadata.reflection = Gpb_GridCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Actor::kBeliefTimeFieldNumber;
const int Gpb_Actor::kUniqueIdFieldNumber;
const int Gpb_Actor::kAffiliationFieldNumber;
const int Gpb_Actor::kTypeFieldNumber;
const int Gpb_Actor::kIsAliveFieldNumber;
const int Gpb_Actor::kNumStorageSlotsFieldNumber;
const int Gpb_Actor::kNumCasualtiesStoredFieldNumber;
const int Gpb_Actor::kNumSuppliesStoredFieldNumber;
const int Gpb_Actor::kNumCiviliansStoredFieldNumber;
const int Gpb_Actor::kIsWeaponizedFieldNumber;
const int Gpb_Actor::kHasJammerFieldNumber;
const int Gpb_Actor::kFuelRemainingFieldNumber;
const int Gpb_Actor::kPosXFieldNumber;
const int Gpb_Actor::kPosYFieldNumber;
const int Gpb_Actor::kPosZFieldNumber;
const int Gpb_Actor::kVelocityXFieldNumber;
const int Gpb_Actor::kVelocityYFieldNumber;
const int Gpb_Actor::kVelocityZFieldNumber;
#endif  // !_MSC_VER

Gpb_Actor::Gpb_Actor()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Actor)
}

void Gpb_Actor::InitAsDefaultInstance() {
}

Gpb_Actor::Gpb_Actor(const Gpb_Actor& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Actor)
}

void Gpb_Actor::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  unique_id_ = 0;
  affiliation_ = 0;
  type_ = 0;
  is_alive_ = false;
  num_storage_slots_ = 0u;
  num_casualties_stored_ = 0u;
  num_supplies_stored_ = 0u;
  num_civilians_stored_ = 0u;
  is_weaponized_ = false;
  has_jammer_ = false;
  fuel_remaining_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  velocity_x_ = 0;
  velocity_y_ = 0;
  velocity_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Actor::~Gpb_Actor() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Actor)
  SharedDtor();
}

void Gpb_Actor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_Actor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Actor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Actor_descriptor_;
}

const Gpb_Actor& Gpb_Actor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Actor* Gpb_Actor::default_instance_ = NULL;

Gpb_Actor* Gpb_Actor::New(::google::protobuf::Arena* arena) const {
  Gpb_Actor* n = new Gpb_Actor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Actor::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_Actor*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(belief_time_, is_alive_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(is_weaponized_, velocity_x_);
  }
  ZR_(velocity_y_, velocity_z_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Actor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Actor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_unique_id;
        break;
      }

      // required int32 unique_id = 2;
      case 2: {
        if (tag == 16) {
         parse_unique_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unique_id_)));
          set_has_unique_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_affiliation;
        break;
      }

      // required int32 affiliation = 3;
      case 3: {
        if (tag == 24) {
         parse_affiliation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &affiliation_)));
          set_has_affiliation();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_is_alive;
        break;
      }

      // required bool is_alive = 5;
      case 5: {
        if (tag == 40) {
         parse_is_alive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_alive_)));
          set_has_is_alive();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_num_storage_slots;
        break;
      }

      // required uint32 num_storage_slots = 6;
      case 6: {
        if (tag == 48) {
         parse_num_storage_slots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_storage_slots_)));
          set_has_num_storage_slots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_num_casualties_stored;
        break;
      }

      // required uint32 num_casualties_stored = 7;
      case 7: {
        if (tag == 56) {
         parse_num_casualties_stored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_casualties_stored_)));
          set_has_num_casualties_stored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_num_supplies_stored;
        break;
      }

      // required uint32 num_supplies_stored = 8;
      case 8: {
        if (tag == 64) {
         parse_num_supplies_stored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_supplies_stored_)));
          set_has_num_supplies_stored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_civilians_stored;
        break;
      }

      // required uint32 num_civilians_stored = 9;
      case 9: {
        if (tag == 72) {
         parse_num_civilians_stored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_civilians_stored_)));
          set_has_num_civilians_stored();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_is_weaponized;
        break;
      }

      // required bool is_weaponized = 10;
      case 10: {
        if (tag == 80) {
         parse_is_weaponized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_weaponized_)));
          set_has_is_weaponized();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_has_jammer;
        break;
      }

      // required bool has_jammer = 11;
      case 11: {
        if (tag == 88) {
         parse_has_jammer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_jammer_)));
          set_has_has_jammer();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_fuel_remaining;
        break;
      }

      // required float fuel_remaining = 12;
      case 12: {
        if (tag == 101) {
         parse_fuel_remaining:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fuel_remaining_)));
          set_has_fuel_remaining();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_pos_x;
        break;
      }

      // required float pos_x = 13;
      case 13: {
        if (tag == 109) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_pos_y;
        break;
      }

      // required float pos_y = 14;
      case 14: {
        if (tag == 117) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_pos_z;
        break;
      }

      // required float pos_z = 15;
      case 15: {
        if (tag == 125) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          set_has_pos_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_velocity_x;
        break;
      }

      // optional float velocity_x = 16;
      case 16: {
        if (tag == 133) {
         parse_velocity_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_x_)));
          set_has_velocity_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_velocity_y;
        break;
      }

      // optional float velocity_y = 17;
      case 17: {
        if (tag == 141) {
         parse_velocity_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_y_)));
          set_has_velocity_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_velocity_z;
        break;
      }

      // optional float velocity_z = 18;
      case 18: {
        if (tag == 149) {
         parse_velocity_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &velocity_z_)));
          set_has_velocity_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Actor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Actor)
  return false;
#undef DO_
}

void Gpb_Actor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Actor)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required int32 unique_id = 2;
  if (has_unique_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->unique_id(), output);
  }

  // required int32 affiliation = 3;
  if (has_affiliation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->affiliation(), output);
  }

  // required int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // required bool is_alive = 5;
  if (has_is_alive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_alive(), output);
  }

  // required uint32 num_storage_slots = 6;
  if (has_num_storage_slots()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num_storage_slots(), output);
  }

  // required uint32 num_casualties_stored = 7;
  if (has_num_casualties_stored()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->num_casualties_stored(), output);
  }

  // required uint32 num_supplies_stored = 8;
  if (has_num_supplies_stored()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->num_supplies_stored(), output);
  }

  // required uint32 num_civilians_stored = 9;
  if (has_num_civilians_stored()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->num_civilians_stored(), output);
  }

  // required bool is_weaponized = 10;
  if (has_is_weaponized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_weaponized(), output);
  }

  // required bool has_jammer = 11;
  if (has_has_jammer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->has_jammer(), output);
  }

  // required float fuel_remaining = 12;
  if (has_fuel_remaining()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fuel_remaining(), output);
  }

  // required float pos_x = 13;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pos_x(), output);
  }

  // required float pos_y = 14;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->pos_y(), output);
  }

  // required float pos_z = 15;
  if (has_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->pos_z(), output);
  }

  // optional float velocity_x = 16;
  if (has_velocity_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->velocity_x(), output);
  }

  // optional float velocity_y = 17;
  if (has_velocity_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->velocity_y(), output);
  }

  // optional float velocity_z = 18;
  if (has_velocity_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->velocity_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Actor)
}

::google::protobuf::uint8* Gpb_Actor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Actor)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required int32 unique_id = 2;
  if (has_unique_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->unique_id(), target);
  }

  // required int32 affiliation = 3;
  if (has_affiliation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->affiliation(), target);
  }

  // required int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // required bool is_alive = 5;
  if (has_is_alive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_alive(), target);
  }

  // required uint32 num_storage_slots = 6;
  if (has_num_storage_slots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num_storage_slots(), target);
  }

  // required uint32 num_casualties_stored = 7;
  if (has_num_casualties_stored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->num_casualties_stored(), target);
  }

  // required uint32 num_supplies_stored = 8;
  if (has_num_supplies_stored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->num_supplies_stored(), target);
  }

  // required uint32 num_civilians_stored = 9;
  if (has_num_civilians_stored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->num_civilians_stored(), target);
  }

  // required bool is_weaponized = 10;
  if (has_is_weaponized()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_weaponized(), target);
  }

  // required bool has_jammer = 11;
  if (has_has_jammer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->has_jammer(), target);
  }

  // required float fuel_remaining = 12;
  if (has_fuel_remaining()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->fuel_remaining(), target);
  }

  // required float pos_x = 13;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->pos_x(), target);
  }

  // required float pos_y = 14;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->pos_y(), target);
  }

  // required float pos_z = 15;
  if (has_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->pos_z(), target);
  }

  // optional float velocity_x = 16;
  if (has_velocity_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->velocity_x(), target);
  }

  // optional float velocity_y = 17;
  if (has_velocity_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->velocity_y(), target);
  }

  // optional float velocity_z = 18;
  if (has_velocity_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->velocity_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Actor)
  return target;
}

int Gpb_Actor::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_unique_id()) {
    // required int32 unique_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unique_id());
  }

  if (has_affiliation()) {
    // required int32 affiliation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->affiliation());
  }

  if (has_type()) {
    // required int32 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  if (has_is_alive()) {
    // required bool is_alive = 5;
    total_size += 1 + 1;
  }

  if (has_num_storage_slots()) {
    // required uint32 num_storage_slots = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_storage_slots());
  }

  if (has_num_casualties_stored()) {
    // required uint32 num_casualties_stored = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_casualties_stored());
  }

  if (has_num_supplies_stored()) {
    // required uint32 num_supplies_stored = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_supplies_stored());
  }

  if (has_num_civilians_stored()) {
    // required uint32 num_civilians_stored = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_civilians_stored());
  }

  if (has_is_weaponized()) {
    // required bool is_weaponized = 10;
    total_size += 1 + 1;
  }

  if (has_has_jammer()) {
    // required bool has_jammer = 11;
    total_size += 1 + 1;
  }

  if (has_fuel_remaining()) {
    // required float fuel_remaining = 12;
    total_size += 1 + 4;
  }

  if (has_pos_x()) {
    // required float pos_x = 13;
    total_size += 1 + 4;
  }

  if (has_pos_y()) {
    // required float pos_y = 14;
    total_size += 1 + 4;
  }

  if (has_pos_z()) {
    // required float pos_z = 15;
    total_size += 1 + 4;
  }

  return total_size;
}
int Gpb_Actor::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00007fff) ^ 0x00007fff) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required int32 unique_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->unique_id());

    // required int32 affiliation = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->affiliation());

    // required int32 type = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

    // required bool is_alive = 5;
    total_size += 1 + 1;

    // required uint32 num_storage_slots = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_storage_slots());

    // required uint32 num_casualties_stored = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_casualties_stored());

    // required uint32 num_supplies_stored = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_supplies_stored());

    // required uint32 num_civilians_stored = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->num_civilians_stored());

    // required bool is_weaponized = 10;
    total_size += 1 + 1;

    // required bool has_jammer = 11;
    total_size += 1 + 1;

    // required float fuel_remaining = 12;
    total_size += 1 + 4;

    // required float pos_x = 13;
    total_size += 1 + 4;

    // required float pos_y = 14;
    total_size += 1 + 4;

    // required float pos_z = 15;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional float velocity_x = 16;
  if (has_velocity_x()) {
    total_size += 2 + 4;
  }

  if (_has_bits_[16 / 32] & 196608) {
    // optional float velocity_y = 17;
    if (has_velocity_y()) {
      total_size += 2 + 4;
    }

    // optional float velocity_z = 18;
    if (has_velocity_z()) {
      total_size += 2 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Actor::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Actor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Actor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Actor::MergeFrom(const Gpb_Actor& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_unique_id()) {
      set_unique_id(from.unique_id());
    }
    if (from.has_affiliation()) {
      set_affiliation(from.affiliation());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_is_alive()) {
      set_is_alive(from.is_alive());
    }
    if (from.has_num_storage_slots()) {
      set_num_storage_slots(from.num_storage_slots());
    }
    if (from.has_num_casualties_stored()) {
      set_num_casualties_stored(from.num_casualties_stored());
    }
    if (from.has_num_supplies_stored()) {
      set_num_supplies_stored(from.num_supplies_stored());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_civilians_stored()) {
      set_num_civilians_stored(from.num_civilians_stored());
    }
    if (from.has_is_weaponized()) {
      set_is_weaponized(from.is_weaponized());
    }
    if (from.has_has_jammer()) {
      set_has_jammer(from.has_jammer());
    }
    if (from.has_fuel_remaining()) {
      set_fuel_remaining(from.fuel_remaining());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_pos_z()) {
      set_pos_z(from.pos_z());
    }
    if (from.has_velocity_x()) {
      set_velocity_x(from.velocity_x());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_velocity_y()) {
      set_velocity_y(from.velocity_y());
    }
    if (from.has_velocity_z()) {
      set_velocity_z(from.velocity_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Actor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Actor::CopyFrom(const Gpb_Actor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Actor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void Gpb_Actor::Swap(Gpb_Actor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Actor::InternalSwap(Gpb_Actor* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(unique_id_, other->unique_id_);
  std::swap(affiliation_, other->affiliation_);
  std::swap(type_, other->type_);
  std::swap(is_alive_, other->is_alive_);
  std::swap(num_storage_slots_, other->num_storage_slots_);
  std::swap(num_casualties_stored_, other->num_casualties_stored_);
  std::swap(num_supplies_stored_, other->num_supplies_stored_);
  std::swap(num_civilians_stored_, other->num_civilians_stored_);
  std::swap(is_weaponized_, other->is_weaponized_);
  std::swap(has_jammer_, other->has_jammer_);
  std::swap(fuel_remaining_, other->fuel_remaining_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(velocity_x_, other->velocity_x_);
  std::swap(velocity_y_, other->velocity_y_);
  std::swap(velocity_z_, other->velocity_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Actor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Actor_descriptor_;
  metadata.reflection = Gpb_Actor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Custom::kBeliefTimeFieldNumber;
const int Gpb_Custom::kDataFieldNumber;
#endif  // !_MSC_VER

Gpb_Custom::Gpb_Custom()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Custom)
}

void Gpb_Custom::InitAsDefaultInstance() {
}

Gpb_Custom::Gpb_Custom(const Gpb_Custom& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Custom)
}

void Gpb_Custom::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Custom::~Gpb_Custom() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Custom)
  SharedDtor();
}

void Gpb_Custom::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Gpb_Custom::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Custom::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Custom_descriptor_;
}

const Gpb_Custom& Gpb_Custom::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Custom* Gpb_Custom::default_instance_ = NULL;

Gpb_Custom* Gpb_Custom::New(::google::protobuf::Arena* arena) const {
  Gpb_Custom* n = new Gpb_Custom;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Custom::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    belief_time_ = GOOGLE_ULONGLONG(0);
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Custom::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Custom)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Custom)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Custom)
  return false;
#undef DO_
}

void Gpb_Custom::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Custom)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Custom)
}

::google::protobuf::uint8* Gpb_Custom::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Custom)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Custom)
  return target;
}

int Gpb_Custom::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_data()) {
    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  return total_size;
}
int Gpb_Custom::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required bytes data = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Custom::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Custom* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Custom*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Custom::MergeFrom(const Gpb_Custom& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Custom::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Custom::CopyFrom(const Gpb_Custom& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Custom::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Gpb_Custom::Swap(Gpb_Custom* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Custom::InternalSwap(Gpb_Custom* other) {
  std::swap(belief_time_, other->belief_time_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Custom::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Custom_descriptor_;
  metadata.reflection = Gpb_Custom_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Base::kBeliefTimeFieldNumber;
const int Gpb_Base::kIdFieldNumber;
const int Gpb_Base::kCellsFieldNumber;
const int Gpb_Base::kSuppliesFieldNumber;
#endif  // !_MSC_VER

Gpb_Base::Gpb_Base()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Base)
}

void Gpb_Base::InitAsDefaultInstance() {
}

Gpb_Base::Gpb_Base(const Gpb_Base& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Base)
}

void Gpb_Base::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  id_ = 0;
  supplies_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Base::~Gpb_Base() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Base)
  SharedDtor();
}

void Gpb_Base::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_Base::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Base::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Base_descriptor_;
}

const Gpb_Base& Gpb_Base::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Base* Gpb_Base::default_instance_ = NULL;

Gpb_Base* Gpb_Base::New(::google::protobuf::Arena* arena) const {
  Gpb_Base* n = new Gpb_Base;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Base::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_Base*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 11) {
    ZR_(id_, supplies_);
    belief_time_ = GOOGLE_ULONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Base::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Base)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        break;
      }

      // repeated .autonomy_msg.Gpb_GridCell cells = 3;
      case 3: {
        if (tag == 26) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        if (input->ExpectTag(37)) goto parse_supplies;
        break;
      }

      // required float supplies = 4;
      case 4: {
        if (tag == 37) {
         parse_supplies:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &supplies_)));
          set_has_supplies();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Base)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Base)
  return false;
#undef DO_
}

void Gpb_Base::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Base)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cells(i), output);
  }

  // required float supplies = 4;
  if (has_supplies()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->supplies(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Base)
}

::google::protobuf::uint8* Gpb_Base::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Base)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cells(i), target);
  }

  // required float supplies = 4;
  if (has_supplies()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->supplies(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Base)
  return target;
}

int Gpb_Base::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_id()) {
    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  if (has_supplies()) {
    // required float supplies = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
int Gpb_Base::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000b) ^ 0x0000000b) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required int32 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());

    // required float supplies = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Base::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Base* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Base*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Base::MergeFrom(const Gpb_Base& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_supplies()) {
      set_supplies(from.supplies());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Base::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Base::CopyFrom(const Gpb_Base& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Base::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cells())) return false;
  return true;
}

void Gpb_Base::Swap(Gpb_Base* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Base::InternalSwap(Gpb_Base* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(id_, other->id_);
  cells_.UnsafeArenaSwap(&other->cells_);
  std::swap(supplies_, other->supplies_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Base::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Base_descriptor_;
  metadata.reflection = Gpb_Base_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Terrain::kBeliefTimeFieldNumber;
const int Gpb_Terrain::kTypeFieldNumber;
const int Gpb_Terrain::kCellsFieldNumber;
#endif  // !_MSC_VER

Gpb_Terrain::Gpb_Terrain()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Terrain)
}

void Gpb_Terrain::InitAsDefaultInstance() {
}

Gpb_Terrain::Gpb_Terrain(const Gpb_Terrain& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Terrain)
}

void Gpb_Terrain::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Terrain::~Gpb_Terrain() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Terrain)
  SharedDtor();
}

void Gpb_Terrain::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_Terrain::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Terrain::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Terrain_descriptor_;
}

const Gpb_Terrain& Gpb_Terrain::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Terrain* Gpb_Terrain::default_instance_ = NULL;

Gpb_Terrain* Gpb_Terrain::New(::google::protobuf::Arena* arena) const {
  Gpb_Terrain* n = new Gpb_Terrain;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Terrain::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    belief_time_ = GOOGLE_ULONGLONG(0);
    type_ = 0;
  }
  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Terrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Terrain)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        break;
      }

      // repeated .autonomy_msg.Gpb_GridCell cells = 3;
      case 3: {
        if (tag == 26) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cells;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Terrain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Terrain)
  return false;
#undef DO_
}

void Gpb_Terrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Terrain)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cells(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Terrain)
}

::google::protobuf::uint8* Gpb_Terrain::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Terrain)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  for (unsigned int i = 0, n = this->cells_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cells(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Terrain)
  return target;
}

int Gpb_Terrain::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_type()) {
    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  return total_size;
}
int Gpb_Terrain::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required int32 type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .autonomy_msg.Gpb_GridCell cells = 3;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Terrain::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Terrain* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Terrain*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Terrain::MergeFrom(const Gpb_Terrain& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Terrain::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Terrain::CopyFrom(const Gpb_Terrain& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Terrain::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->cells())) return false;
  return true;
}

void Gpb_Terrain::Swap(Gpb_Terrain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Terrain::InternalSwap(Gpb_Terrain* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(type_, other->type_);
  cells_.UnsafeArenaSwap(&other->cells_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Terrain::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Terrain_descriptor_;
  metadata.reflection = Gpb_Terrain_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Mode_Command::kBeliefTimeFieldNumber;
const int Gpb_Mode_Command::kRequestTimeFieldNumber;
const int Gpb_Mode_Command::kActorIdFieldNumber;
const int Gpb_Mode_Command::kModeIdFieldNumber;
#endif  // !_MSC_VER

Gpb_Mode_Command::Gpb_Mode_Command()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Mode_Command)
}

void Gpb_Mode_Command::InitAsDefaultInstance() {
}

Gpb_Mode_Command::Gpb_Mode_Command(const Gpb_Mode_Command& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Mode_Command)
}

void Gpb_Mode_Command::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  actor_id_ = 0;
  mode_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Mode_Command::~Gpb_Mode_Command() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Mode_Command)
  SharedDtor();
}

void Gpb_Mode_Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_Mode_Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Mode_Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Mode_Command_descriptor_;
}

const Gpb_Mode_Command& Gpb_Mode_Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Mode_Command* Gpb_Mode_Command::default_instance_ = NULL;

Gpb_Mode_Command* Gpb_Mode_Command::New(::google::protobuf::Arena* arena) const {
  Gpb_Mode_Command* n = new Gpb_Mode_Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Mode_Command::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_Mode_Command*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(belief_time_, mode_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Mode_Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Mode_Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // required uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actor_id;
        break;
      }

      // required int32 actor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_mode_id;
        break;
      }

      // required int32 mode_id = 4;
      case 4: {
        if (tag == 32) {
         parse_mode_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_id_)));
          set_has_mode_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Mode_Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Mode_Command)
  return false;
#undef DO_
}

void Gpb_Mode_Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Mode_Command)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // required int32 mode_id = 4;
  if (has_mode_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mode_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Mode_Command)
}

::google::protobuf::uint8* Gpb_Mode_Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Mode_Command)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // required int32 mode_id = 4;
  if (has_mode_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mode_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Mode_Command)
  return target;
}

int Gpb_Mode_Command::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_request_time()) {
    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());
  }

  if (has_actor_id()) {
    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());
  }

  if (has_mode_id()) {
    // required int32 mode_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mode_id());
  }

  return total_size;
}
int Gpb_Mode_Command::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());

    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());

    // required int32 mode_id = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->mode_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Mode_Command::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Mode_Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Mode_Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Mode_Command::MergeFrom(const Gpb_Mode_Command& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_mode_id()) {
      set_mode_id(from.mode_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Mode_Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Mode_Command::CopyFrom(const Gpb_Mode_Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Mode_Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Gpb_Mode_Command::Swap(Gpb_Mode_Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Mode_Command::InternalSwap(Gpb_Mode_Command* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(request_time_, other->request_time_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(mode_id_, other->mode_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Mode_Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Mode_Command_descriptor_;
  metadata.reflection = Gpb_Mode_Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Waypoint::kBeliefTimeFieldNumber;
const int Gpb_Waypoint::kRequestTimeFieldNumber;
const int Gpb_Waypoint::kActorIdFieldNumber;
const int Gpb_Waypoint::kPosXFieldNumber;
const int Gpb_Waypoint::kPosYFieldNumber;
const int Gpb_Waypoint::kPosZFieldNumber;
#endif  // !_MSC_VER

Gpb_Waypoint::Gpb_Waypoint()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Waypoint)
}

void Gpb_Waypoint::InitAsDefaultInstance() {
}

Gpb_Waypoint::Gpb_Waypoint(const Gpb_Waypoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Waypoint)
}

void Gpb_Waypoint::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  actor_id_ = 0;
  pos_x_ = 0;
  pos_y_ = 0;
  pos_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Waypoint::~Gpb_Waypoint() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Waypoint)
  SharedDtor();
}

void Gpb_Waypoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_Waypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Waypoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Waypoint_descriptor_;
}

const Gpb_Waypoint& Gpb_Waypoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Waypoint* Gpb_Waypoint::default_instance_ = NULL;

Gpb_Waypoint* Gpb_Waypoint::New(::google::protobuf::Arena* arena) const {
  Gpb_Waypoint* n = new Gpb_Waypoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Waypoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_Waypoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(belief_time_, pos_z_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Waypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Waypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // required uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actor_id;
        break;
      }

      // required int32 actor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pos_x;
        break;
      }

      // required float pos_x = 4;
      case 4: {
        if (tag == 37) {
         parse_pos_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_x_)));
          set_has_pos_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pos_y;
        break;
      }

      // required float pos_y = 5;
      case 5: {
        if (tag == 45) {
         parse_pos_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_y_)));
          set_has_pos_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pos_z;
        break;
      }

      // required float pos_z = 6;
      case 6: {
        if (tag == 53) {
         parse_pos_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pos_z_)));
          set_has_pos_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Waypoint)
  return false;
#undef DO_
}

void Gpb_Waypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Waypoint)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // required float pos_x = 4;
  if (has_pos_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pos_x(), output);
  }

  // required float pos_y = 5;
  if (has_pos_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pos_y(), output);
  }

  // required float pos_z = 6;
  if (has_pos_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pos_z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Waypoint)
}

::google::protobuf::uint8* Gpb_Waypoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Waypoint)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // required float pos_x = 4;
  if (has_pos_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pos_x(), target);
  }

  // required float pos_y = 5;
  if (has_pos_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pos_y(), target);
  }

  // required float pos_z = 6;
  if (has_pos_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pos_z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Waypoint)
  return target;
}

int Gpb_Waypoint::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_request_time()) {
    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());
  }

  if (has_actor_id()) {
    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());
  }

  if (has_pos_x()) {
    // required float pos_x = 4;
    total_size += 1 + 4;
  }

  if (has_pos_y()) {
    // required float pos_y = 5;
    total_size += 1 + 4;
  }

  if (has_pos_z()) {
    // required float pos_z = 6;
    total_size += 1 + 4;
  }

  return total_size;
}
int Gpb_Waypoint::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());

    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());

    // required float pos_x = 4;
    total_size += 1 + 4;

    // required float pos_y = 5;
    total_size += 1 + 4;

    // required float pos_z = 6;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Waypoint::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Waypoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Waypoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Waypoint::MergeFrom(const Gpb_Waypoint& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_pos_x()) {
      set_pos_x(from.pos_x());
    }
    if (from.has_pos_y()) {
      set_pos_y(from.pos_y());
    }
    if (from.has_pos_z()) {
      set_pos_z(from.pos_z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Waypoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Waypoint::CopyFrom(const Gpb_Waypoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Waypoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Gpb_Waypoint::Swap(Gpb_Waypoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Waypoint::InternalSwap(Gpb_Waypoint* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(request_time_, other->request_time_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(pos_x_, other->pos_x_);
  std::swap(pos_y_, other->pos_y_);
  std::swap(pos_z_, other->pos_z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Waypoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Waypoint_descriptor_;
  metadata.reflection = Gpb_Waypoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_Time::kBeliefTimeFieldNumber;
const int Gpb_Time::kTimeFieldNumber;
#endif  // !_MSC_VER

Gpb_Time::Gpb_Time()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_Time)
}

void Gpb_Time::InitAsDefaultInstance() {
}

Gpb_Time::Gpb_Time(const Gpb_Time& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_Time)
}

void Gpb_Time::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  time_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_Time::~Gpb_Time() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_Time)
  SharedDtor();
}

void Gpb_Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_Time_descriptor_;
}

const Gpb_Time& Gpb_Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_Time* Gpb_Time::default_instance_ = NULL;

Gpb_Time* Gpb_Time::New(::google::protobuf::Arena* arena) const {
  Gpb_Time* n = new Gpb_Time;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_Time::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_Time*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(belief_time_, time_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_Time)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required uint64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_Time)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_Time)
  return false;
#undef DO_
}

void Gpb_Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_Time)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_Time)
}

::google::protobuf::uint8* Gpb_Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_Time)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_Time)
  return target;
}

int Gpb_Time::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_time()) {
    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());
  }

  return total_size;
}
int Gpb_Time::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_Time::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_Time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_Time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_Time::MergeFrom(const Gpb_Time& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_Time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_Time::CopyFrom(const Gpb_Time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Gpb_Time::Swap(Gpb_Time* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_Time::InternalSwap(Gpb_Time* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(time_, other->time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_Time_descriptor_;
  metadata.reflection = Gpb_Time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_RoadCell::kBeliefTimeFieldNumber;
const int Gpb_RoadCell::kIsRoadEndFieldNumber;
const int Gpb_RoadCell::kCellFieldNumber;
#endif  // !_MSC_VER

Gpb_RoadCell::Gpb_RoadCell()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_RoadCell)
}

void Gpb_RoadCell::InitAsDefaultInstance() {
  cell_ = const_cast< ::autonomy_msg::Gpb_GridCell*>(&::autonomy_msg::Gpb_GridCell::default_instance());
}

Gpb_RoadCell::Gpb_RoadCell(const Gpb_RoadCell& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_RoadCell)
}

void Gpb_RoadCell::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  isroadend_ = false;
  cell_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_RoadCell::~Gpb_RoadCell() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_RoadCell)
  SharedDtor();
}

void Gpb_RoadCell::SharedDtor() {
  if (this != default_instance_) {
    delete cell_;
  }
}

void Gpb_RoadCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_RoadCell::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_RoadCell_descriptor_;
}

const Gpb_RoadCell& Gpb_RoadCell::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_RoadCell* Gpb_RoadCell::default_instance_ = NULL;

Gpb_RoadCell* Gpb_RoadCell::New(::google::protobuf::Arena* arena) const {
  Gpb_RoadCell* n = new Gpb_RoadCell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_RoadCell::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    belief_time_ = GOOGLE_ULONGLONG(0);
    isroadend_ = false;
    if (has_cell()) {
      if (cell_ != NULL) cell_->::autonomy_msg::Gpb_GridCell::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_RoadCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_RoadCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isRoadEnd;
        break;
      }

      // required bool isRoadEnd = 2;
      case 2: {
        if (tag == 16) {
         parse_isRoadEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isroadend_)));
          set_has_isroadend();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cell;
        break;
      }

      // required .autonomy_msg.Gpb_GridCell cell = 3;
      case 3: {
        if (tag == 26) {
         parse_cell:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cell()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_RoadCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_RoadCell)
  return false;
#undef DO_
}

void Gpb_RoadCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_RoadCell)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required bool isRoadEnd = 2;
  if (has_isroadend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isroadend(), output);
  }

  // required .autonomy_msg.Gpb_GridCell cell = 3;
  if (has_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->cell_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_RoadCell)
}

::google::protobuf::uint8* Gpb_RoadCell::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_RoadCell)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required bool isRoadEnd = 2;
  if (has_isroadend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isroadend(), target);
  }

  // required .autonomy_msg.Gpb_GridCell cell = 3;
  if (has_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->cell_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_RoadCell)
  return target;
}

int Gpb_RoadCell::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_isroadend()) {
    // required bool isRoadEnd = 2;
    total_size += 1 + 1;
  }

  if (has_cell()) {
    // required .autonomy_msg.Gpb_GridCell cell = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cell_);
  }

  return total_size;
}
int Gpb_RoadCell::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required bool isRoadEnd = 2;
    total_size += 1 + 1;

    // required .autonomy_msg.Gpb_GridCell cell = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cell_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_RoadCell::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_RoadCell* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_RoadCell*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_RoadCell::MergeFrom(const Gpb_RoadCell& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_isroadend()) {
      set_isroadend(from.isroadend());
    }
    if (from.has_cell()) {
      mutable_cell()->::autonomy_msg::Gpb_GridCell::MergeFrom(from.cell());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_RoadCell::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_RoadCell::CopyFrom(const Gpb_RoadCell& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_RoadCell::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_cell()) {
    if (!this->cell_->IsInitialized()) return false;
  }
  return true;
}

void Gpb_RoadCell::Swap(Gpb_RoadCell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_RoadCell::InternalSwap(Gpb_RoadCell* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(isroadend_, other->isroadend_);
  std::swap(cell_, other->cell_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_RoadCell::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_RoadCell_descriptor_;
  metadata.reflection = Gpb_RoadCell_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_CasualtyDelivery::kBeliefTimeFieldNumber;
const int Gpb_CasualtyDelivery::kRequestTimeFieldNumber;
const int Gpb_CasualtyDelivery::kActorIdFieldNumber;
const int Gpb_CasualtyDelivery::kGreedyFieldNumber;
const int Gpb_CasualtyDelivery::kMultiplicityFieldNumber;
#endif  // !_MSC_VER

Gpb_CasualtyDelivery::Gpb_CasualtyDelivery()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_CasualtyDelivery)
}

void Gpb_CasualtyDelivery::InitAsDefaultInstance() {
}

Gpb_CasualtyDelivery::Gpb_CasualtyDelivery(const Gpb_CasualtyDelivery& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_CasualtyDelivery)
}

void Gpb_CasualtyDelivery::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  actor_id_ = 0;
  greedy_ = false;
  multiplicity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_CasualtyDelivery::~Gpb_CasualtyDelivery() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_CasualtyDelivery)
  SharedDtor();
}

void Gpb_CasualtyDelivery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_CasualtyDelivery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_CasualtyDelivery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_CasualtyDelivery_descriptor_;
}

const Gpb_CasualtyDelivery& Gpb_CasualtyDelivery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_CasualtyDelivery* Gpb_CasualtyDelivery::default_instance_ = NULL;

Gpb_CasualtyDelivery* Gpb_CasualtyDelivery::New(::google::protobuf::Arena* arena) const {
  Gpb_CasualtyDelivery* n = new Gpb_CasualtyDelivery;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_CasualtyDelivery::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_CasualtyDelivery*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(belief_time_, multiplicity_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_CasualtyDelivery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_CasualtyDelivery)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // required uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actor_id;
        break;
      }

      // required int32 actor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_greedy;
        break;
      }

      // required bool greedy = 4;
      case 4: {
        if (tag == 32) {
         parse_greedy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &greedy_)));
          set_has_greedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multiplicity;
        break;
      }

      // required int32 multiplicity = 5;
      case 5: {
        if (tag == 40) {
         parse_multiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiplicity_)));
          set_has_multiplicity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_CasualtyDelivery)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_CasualtyDelivery)
  return false;
#undef DO_
}

void Gpb_CasualtyDelivery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_CasualtyDelivery)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // required bool greedy = 4;
  if (has_greedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->greedy(), output);
  }

  // required int32 multiplicity = 5;
  if (has_multiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->multiplicity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_CasualtyDelivery)
}

::google::protobuf::uint8* Gpb_CasualtyDelivery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_CasualtyDelivery)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // required bool greedy = 4;
  if (has_greedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->greedy(), target);
  }

  // required int32 multiplicity = 5;
  if (has_multiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->multiplicity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_CasualtyDelivery)
  return target;
}

int Gpb_CasualtyDelivery::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_request_time()) {
    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());
  }

  if (has_actor_id()) {
    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());
  }

  if (has_greedy()) {
    // required bool greedy = 4;
    total_size += 1 + 1;
  }

  if (has_multiplicity()) {
    // required int32 multiplicity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiplicity());
  }

  return total_size;
}
int Gpb_CasualtyDelivery::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());

    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());

    // required bool greedy = 4;
    total_size += 1 + 1;

    // required int32 multiplicity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiplicity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_CasualtyDelivery::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_CasualtyDelivery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_CasualtyDelivery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_CasualtyDelivery::MergeFrom(const Gpb_CasualtyDelivery& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_greedy()) {
      set_greedy(from.greedy());
    }
    if (from.has_multiplicity()) {
      set_multiplicity(from.multiplicity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_CasualtyDelivery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_CasualtyDelivery::CopyFrom(const Gpb_CasualtyDelivery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_CasualtyDelivery::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Gpb_CasualtyDelivery::Swap(Gpb_CasualtyDelivery* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_CasualtyDelivery::InternalSwap(Gpb_CasualtyDelivery* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(request_time_, other->request_time_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(greedy_, other->greedy_);
  std::swap(multiplicity_, other->multiplicity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_CasualtyDelivery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_CasualtyDelivery_descriptor_;
  metadata.reflection = Gpb_CasualtyDelivery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Gpb_SupplyPickup::kBeliefTimeFieldNumber;
const int Gpb_SupplyPickup::kRequestTimeFieldNumber;
const int Gpb_SupplyPickup::kActorIdFieldNumber;
const int Gpb_SupplyPickup::kGreedyFieldNumber;
const int Gpb_SupplyPickup::kMultiplicityFieldNumber;
#endif  // !_MSC_VER

Gpb_SupplyPickup::Gpb_SupplyPickup()
  : ::google::protobuf::Message() , _internal_metadata_(NULL)  {
  SharedCtor();
  // @@protoc_insertion_point(constructor:autonomy_msg.Gpb_SupplyPickup)
}

void Gpb_SupplyPickup::InitAsDefaultInstance() {
}

Gpb_SupplyPickup::Gpb_SupplyPickup(const Gpb_SupplyPickup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:autonomy_msg.Gpb_SupplyPickup)
}

void Gpb_SupplyPickup::SharedCtor() {
  _cached_size_ = 0;
  belief_time_ = GOOGLE_ULONGLONG(0);
  request_time_ = GOOGLE_ULONGLONG(0);
  actor_id_ = 0;
  greedy_ = false;
  multiplicity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Gpb_SupplyPickup::~Gpb_SupplyPickup() {
  // @@protoc_insertion_point(destructor:autonomy_msg.Gpb_SupplyPickup)
  SharedDtor();
}

void Gpb_SupplyPickup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Gpb_SupplyPickup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Gpb_SupplyPickup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Gpb_SupplyPickup_descriptor_;
}

const Gpb_SupplyPickup& Gpb_SupplyPickup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_autonomy_2eproto();
  return *default_instance_;
}

Gpb_SupplyPickup* Gpb_SupplyPickup::default_instance_ = NULL;

Gpb_SupplyPickup* Gpb_SupplyPickup::New(::google::protobuf::Arena* arena) const {
  Gpb_SupplyPickup* n = new Gpb_SupplyPickup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Gpb_SupplyPickup::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Gpb_SupplyPickup*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(belief_time_, multiplicity_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Gpb_SupplyPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autonomy_msg.Gpb_SupplyPickup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 belief_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &belief_time_)));
          set_has_belief_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_request_time;
        break;
      }

      // required uint64 request_time = 2;
      case 2: {
        if (tag == 16) {
         parse_request_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &request_time_)));
          set_has_request_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_actor_id;
        break;
      }

      // required int32 actor_id = 3;
      case 3: {
        if (tag == 24) {
         parse_actor_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &actor_id_)));
          set_has_actor_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_greedy;
        break;
      }

      // required bool greedy = 4;
      case 4: {
        if (tag == 32) {
         parse_greedy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &greedy_)));
          set_has_greedy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multiplicity;
        break;
      }

      // required int32 multiplicity = 5;
      case 5: {
        if (tag == 40) {
         parse_multiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiplicity_)));
          set_has_multiplicity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autonomy_msg.Gpb_SupplyPickup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autonomy_msg.Gpb_SupplyPickup)
  return false;
#undef DO_
}

void Gpb_SupplyPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autonomy_msg.Gpb_SupplyPickup)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->belief_time(), output);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->request_time(), output);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->actor_id(), output);
  }

  // required bool greedy = 4;
  if (has_greedy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->greedy(), output);
  }

  // required int32 multiplicity = 5;
  if (has_multiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->multiplicity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:autonomy_msg.Gpb_SupplyPickup)
}

::google::protobuf::uint8* Gpb_SupplyPickup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:autonomy_msg.Gpb_SupplyPickup)
  // required uint64 belief_time = 1;
  if (has_belief_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->belief_time(), target);
  }

  // required uint64 request_time = 2;
  if (has_request_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->request_time(), target);
  }

  // required int32 actor_id = 3;
  if (has_actor_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->actor_id(), target);
  }

  // required bool greedy = 4;
  if (has_greedy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->greedy(), target);
  }

  // required int32 multiplicity = 5;
  if (has_multiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->multiplicity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:autonomy_msg.Gpb_SupplyPickup)
  return target;
}

int Gpb_SupplyPickup::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_belief_time()) {
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());
  }

  if (has_request_time()) {
    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());
  }

  if (has_actor_id()) {
    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());
  }

  if (has_greedy()) {
    // required bool greedy = 4;
    total_size += 1 + 1;
  }

  if (has_multiplicity()) {
    // required int32 multiplicity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiplicity());
  }

  return total_size;
}
int Gpb_SupplyPickup::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required uint64 belief_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->belief_time());

    // required uint64 request_time = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->request_time());

    // required int32 actor_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->actor_id());

    // required bool greedy = 4;
    total_size += 1 + 1;

    // required int32 multiplicity = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->multiplicity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Gpb_SupplyPickup::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Gpb_SupplyPickup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Gpb_SupplyPickup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Gpb_SupplyPickup::MergeFrom(const Gpb_SupplyPickup& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_belief_time()) {
      set_belief_time(from.belief_time());
    }
    if (from.has_request_time()) {
      set_request_time(from.request_time());
    }
    if (from.has_actor_id()) {
      set_actor_id(from.actor_id());
    }
    if (from.has_greedy()) {
      set_greedy(from.greedy());
    }
    if (from.has_multiplicity()) {
      set_multiplicity(from.multiplicity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Gpb_SupplyPickup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Gpb_SupplyPickup::CopyFrom(const Gpb_SupplyPickup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Gpb_SupplyPickup::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void Gpb_SupplyPickup::Swap(Gpb_SupplyPickup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Gpb_SupplyPickup::InternalSwap(Gpb_SupplyPickup* other) {
  std::swap(belief_time_, other->belief_time_);
  std::swap(request_time_, other->request_time_);
  std::swap(actor_id_, other->actor_id_);
  std::swap(greedy_, other->greedy_);
  std::swap(multiplicity_, other->multiplicity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Gpb_SupplyPickup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Gpb_SupplyPickup_descriptor_;
  metadata.reflection = Gpb_SupplyPickup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace autonomy_msg

// @@protoc_insertion_point(global_scope)
